
proiect_final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c5a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00001cce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000fc  00800060  00800060  00001cce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001cce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001d00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e8  00000000  00000000  00001d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002f92  00000000  00000000  00002024  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001044  00000000  00000000  00004fb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004df3  00000000  00000000  00005ffa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004ac  00000000  00000000  0000adf0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000fa85  00000000  00000000  0000b29c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000032f  00000000  00000000  0001ad21  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000208  00000000  00000000  0001b050  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003f0c  00000000  00000000  0001b258  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
       2:	00 00       	nop
       4:	39 c0       	rjmp	.+114    	; 0x78 <__bad_interrupt>
       6:	00 00       	nop
       8:	37 c0       	rjmp	.+110    	; 0x78 <__bad_interrupt>
       a:	00 00       	nop
       c:	35 c0       	rjmp	.+106    	; 0x78 <__bad_interrupt>
       e:	00 00       	nop
      10:	33 c0       	rjmp	.+102    	; 0x78 <__bad_interrupt>
      12:	00 00       	nop
      14:	31 c0       	rjmp	.+98     	; 0x78 <__bad_interrupt>
      16:	00 00       	nop
      18:	2f c0       	rjmp	.+94     	; 0x78 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0c 94 c2 0c 	jmp	0x1984	; 0x1984 <__vector_7>
      20:	2b c0       	rjmp	.+86     	; 0x78 <__bad_interrupt>
      22:	00 00       	nop
      24:	29 c0       	rjmp	.+82     	; 0x78 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 a4 0c 	jmp	0x1948	; 0x1948 <__vector_10>
      2c:	25 c0       	rjmp	.+74     	; 0x78 <__bad_interrupt>
      2e:	00 00       	nop
      30:	23 c0       	rjmp	.+70     	; 0x78 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 06 0d 	jmp	0x1a0c	; 0x1a0c <__vector_13>
      38:	1f c0       	rjmp	.+62     	; 0x78 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	0c 94 db 0c 	jmp	0x19b6	; 0x19b6 <__vector_15>
      40:	1b c0       	rjmp	.+54     	; 0x78 <__bad_interrupt>
      42:	00 00       	nop
      44:	19 c0       	rjmp	.+50     	; 0x78 <__bad_interrupt>
      46:	00 00       	nop
      48:	17 c0       	rjmp	.+46     	; 0x78 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	15 c0       	rjmp	.+42     	; 0x78 <__bad_interrupt>
      4e:	00 00       	nop
      50:	13 c0       	rjmp	.+38     	; 0x78 <__bad_interrupt>
	...

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	21 e0       	ldi	r18, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ac 35       	cpi	r26, 0x5C	; 92
      6c:	b2 07       	cpc	r27, r18
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
      70:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <main>
      74:	0c 94 2b 0e 	jmp	0x1c56	; 0x1c56 <_exit>

00000078 <__bad_interrupt>:
      78:	c3 cf       	rjmp	.-122    	; 0x0 <__vectors>

0000007a <initialization>:
#include<header.h>

void initialization(void)
{
	var_1ms=0;
      7a:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <var_1ms>
	var_24us=0;
      7e:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <var_24us>
	channel_position=0;
      82:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <channel_position>
	display_T=1;
      86:	81 e0       	ldi	r24, 0x01	; 1
      88:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <display_T>
	enable_pwm=1;
      8c:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <enable_pwm>
	up_pulses=10;
      90:	8a e0       	ldi	r24, 0x0A	; 10
      92:	90 e0       	ldi	r25, 0x00	; 0
      94:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <up_pulses+0x1>
      98:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <up_pulses>
	period=200;
      9c:	88 ec       	ldi	r24, 0xC8	; 200
      9e:	90 e0       	ldi	r25, 0x00	; 0
      a0:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <period+0x1>
      a4:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <period>

	DDRD=0xC0;
      a8:	80 ec       	ldi	r24, 0xC0	; 192
      aa:	81 bb       	out	0x11, r24	; 17
	PORTD=0x3F;
      ac:	8f e3       	ldi	r24, 0x3F	; 63
      ae:	82 bb       	out	0x12, r24	; 18
	DDRA=0x00;
      b0:	1a ba       	out	0x1a, r1	; 26
	PORTA=0xFF;
      b2:	8f ef       	ldi	r24, 0xFF	; 255
      b4:	8b bb       	out	0x1b, r24	; 27

	usart_init();
      b6:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <usart_init>
	LCD_Init();
      ba:	c8 d0       	rcall	.+400    	; 0x24c <LCD_Init>
	config_timer0();
      bc:	0e 94 97 0c 	call	0x192e	; 0x192e <config_timer0>
	config_timer1();
      c0:	0c 94 b3 0c 	jmp	0x1966	; 0x1966 <config_timer1>
      c4:	08 95       	ret

000000c6 <call_1ms>:
void call_1ms(void)
{
	static unsigned short counter_up=0,counter_down=0,measured_pwm=0;
	static unsigned char flag_up=0,flag_down=0;
	
	if(var_1ms==TRUE)
      c6:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <var_1ms>
      ca:	81 30       	cpi	r24, 0x01	; 1
      cc:	09 f0       	breq	.+2      	; 0xd0 <call_1ms+0xa>
      ce:	ad c0       	rjmp	.+346    	; 0x22a <call_1ms+0x164>
	{
		//TRANSMISSION PWM-----------------------------------------------------------------------------------
		
		if(enable_pwm==TRUE)              //changeable using USART
      d0:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <enable_pwm>
      d4:	81 30       	cpi	r24, 0x01	; 1
      d6:	81 f4       	brne	.+32     	; 0xf8 <call_1ms+0x32>
		{
			if(pwm0(up_pulses,period)==PULSE_ON)
      d8:	60 91 53 01 	lds	r22, 0x0153	; 0x800153 <period>
      dc:	70 91 54 01 	lds	r23, 0x0154	; 0x800154 <period+0x1>
      e0:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <up_pulses>
      e4:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <up_pulses+0x1>
      e8:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <pwm0>
      ec:	81 11       	cpse	r24, r1
      ee:	02 c0       	rjmp	.+4      	; 0xf4 <call_1ms+0x2e>
			{
				PORTD&=~(1<<PIND7);      //write 0
      f0:	97 98       	cbi	0x12, 7	; 18
      f2:	03 c0       	rjmp	.+6      	; 0xfa <call_1ms+0x34>
			}
			else
			{
				PORTD|=1<<PIND7;         //write 1
      f4:	97 9a       	sbi	0x12, 7	; 18
      f6:	01 c0       	rjmp	.+2      	; 0xfa <call_1ms+0x34>
			}
		}
		else
		{
			PORTD|=1<<PIND7;        //enable_pwm==FALSE =>write 1
      f8:	97 9a       	sbi	0x12, 7	; 18
		}
		//RECEPTION PWM--------------------------------------------------------------------------------------

		measured_pwm=(PINA>>channel_position)&1;  //save current value of pwm
      fa:	89 b3       	in	r24, 0x19	; 25
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	00 90 55 01 	lds	r0, 0x0155	; 0x800155 <channel_position>
     102:	02 c0       	rjmp	.+4      	; 0x108 <call_1ms+0x42>
     104:	95 95       	asr	r25
     106:	87 95       	ror	r24
     108:	0a 94       	dec	r0
     10a:	e2 f7       	brpl	.-8      	; 0x104 <call_1ms+0x3e>
		
		if(measured_pwm==PULSE_ON)
     10c:	9c 01       	movw	r18, r24
     10e:	21 70       	andi	r18, 0x01	; 1
     110:	33 27       	eor	r19, r19
     112:	80 fd       	sbrc	r24, 0
     114:	17 c0       	rjmp	.+46     	; 0x144 <call_1ms+0x7e>
		{
			counter_up++;
     116:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <counter_up.2301>
     11a:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <counter_up.2301+0x1>
     11e:	01 96       	adiw	r24, 0x01	; 1
     120:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <counter_up.2301+0x1>
     124:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <counter_up.2301>
			flag_up=TRUE;
     128:	21 e0       	ldi	r18, 0x01	; 1
     12a:	20 93 63 00 	sts	0x0063, r18	; 0x800063 <flag_up.2304>
			if(counter_up==5000)
     12e:	88 38       	cpi	r24, 0x88	; 136
     130:	93 41       	sbci	r25, 0x13	; 19
     132:	b9 f5       	brne	.+110    	; 0x1a2 <call_1ms+0xdc>
			{
				signal_on=TRUE;   //display "On" 
     134:	81 e0       	ldi	r24, 0x01	; 1
     136:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <signal_on>
				counter_up=0;
     13a:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <counter_up.2301+0x1>
     13e:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <counter_up.2301>
     142:	2f c0       	rjmp	.+94     	; 0x1a2 <call_1ms+0xdc>
			}
		}
		else
		{
			if(flag_up==TRUE)    //flag_up is TRUE just once after measured_pwm==PULSE_ON at least once 
     144:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <flag_up.2304>
     148:	81 30       	cpi	r24, 0x01	; 1
     14a:	81 f4       	brne	.+32     	; 0x16c <call_1ms+0xa6>
			{
				signal_on=FALSE;
     14c:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <signal_on>
				T_val=counter_up;      //T_val becomes number of up pulses
     150:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <counter_up.2301>
     154:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <counter_up.2301+0x1>
     158:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <T_val+0x1>
     15c:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <T_val>
				counter_up=0;
     160:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <counter_up.2301+0x1>
     164:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <counter_up.2301>
				flag_up=FALSE;
     168:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <flag_up.2304>
			}
		}
		if(measured_pwm==PULSE_OFF)
     16c:	21 30       	cpi	r18, 0x01	; 1
     16e:	31 05       	cpc	r19, r1
     170:	c1 f4       	brne	.+48     	; 0x1a2 <call_1ms+0xdc>
		{
			counter_down++;
     172:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <counter_down.2302>
     176:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <counter_down.2302+0x1>
     17a:	01 96       	adiw	r24, 0x01	; 1
     17c:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <counter_down.2302+0x1>
     180:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <counter_down.2302>
			flag_down=TRUE;
     184:	21 e0       	ldi	r18, 0x01	; 1
     186:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__DATA_REGION_ORIGIN__>
			if(counter_down==5000)
     18a:	88 38       	cpi	r24, 0x88	; 136
     18c:	93 41       	sbci	r25, 0x13	; 19
     18e:	09 f0       	breq	.+2      	; 0x192 <call_1ms+0xcc>
     190:	4a c0       	rjmp	.+148    	; 0x226 <call_1ms+0x160>
			{
				signal_off=TRUE;
     192:	81 e0       	ldi	r24, 0x01	; 1
     194:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <signal_off>
				counter_down=0;
     198:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <counter_down.2302+0x1>
     19c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <counter_down.2302>
     1a0:	42 c0       	rjmp	.+132    	; 0x226 <call_1ms+0x160>
			}

		}
		else
		{
			if(flag_down==TRUE)    //flag_down is TRUE just once after measured_pwm==PULSE_OFF at least once
     1a2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     1a6:	81 30       	cpi	r24, 0x01	; 1
     1a8:	f1 f5       	brne	.+124    	; 0x226 <call_1ms+0x160>
			{
				
				signal_off=FALSE;
     1aa:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <signal_off>
				if(display_T==TRUE)        //display T
     1ae:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <display_T>
     1b2:	81 30       	cpi	r24, 0x01	; 1
     1b4:	a1 f4       	brne	.+40     	; 0x1de <call_1ms+0x118>
				{
					T_val+=counter_down;     // <=> T_val = counter_down + counter_up
     1b6:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <T_val>
     1ba:	30 91 47 01 	lds	r19, 0x0147	; 0x800147 <T_val+0x1>
     1be:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <counter_down.2302>
     1c2:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <counter_down.2302+0x1>
     1c6:	82 0f       	add	r24, r18
     1c8:	93 1f       	adc	r25, r19
     1ca:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <T_val+0x1>
     1ce:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <T_val>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     1d2:	4a e0       	ldi	r20, 0x0A	; 10
     1d4:	6c e4       	ldi	r22, 0x4C	; 76
     1d6:	71 e0       	ldi	r23, 0x01	; 1
     1d8:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <__itoa_ncheck>
     1dc:	1e c0       	rjmp	.+60     	; 0x21a <call_1ms+0x154>
					itoa(T_val,str_measured_value,10);      //update vector in order to display it
				}
				else
				{
					FU_val=((unsigned long)T_val*100)/(T_val+counter_down);     // <=> FU_val = counter_down*100 / T
     1de:	40 91 46 01 	lds	r20, 0x0146	; 0x800146 <T_val>
     1e2:	50 91 47 01 	lds	r21, 0x0147	; 0x800147 <T_val+0x1>
     1e6:	9a 01       	movw	r18, r20
     1e8:	a4 e6       	ldi	r26, 0x64	; 100
     1ea:	b0 e0       	ldi	r27, 0x00	; 0
     1ec:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <__umulhisi3>
     1f0:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <counter_down.2302>
     1f4:	30 91 62 00 	lds	r19, 0x0062	; 0x800062 <counter_down.2302+0x1>
     1f8:	24 0f       	add	r18, r20
     1fa:	35 1f       	adc	r19, r21
     1fc:	40 e0       	ldi	r20, 0x00	; 0
     1fe:	50 e0       	ldi	r21, 0x00	; 0
     200:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <__udivmodsi4>
     204:	da 01       	movw	r26, r20
     206:	c9 01       	movw	r24, r18
     208:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <FU_val+0x1>
     20c:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <FU_val>
     210:	4a e0       	ldi	r20, 0x0A	; 10
     212:	6c e4       	ldi	r22, 0x4C	; 76
     214:	71 e0       	ldi	r23, 0x01	; 1
     216:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <__itoa_ncheck>
					itoa(FU_val,str_measured_value,10);                //update vector in order to display it
				}
				counter_down=0;
     21a:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <counter_down.2302+0x1>
     21e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <counter_down.2302>
				flag_down=FALSE;
     222:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			}
		}
		var_1ms=FALSE;
     226:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <var_1ms>
     22a:	08 95       	ret

0000022c <LCD_Command>:
#include<header.h>

void LCD_Command(unsigned char cmnd)
{
	LCD_Data_Port= cmnd;
     22c:	88 bb       	out	0x18, r24	; 24
	LCD_Command_Port &= ~(1<<RS);	// RS=0 command reg.
     22e:	a8 98       	cbi	0x15, 0	; 21
	LCD_Command_Port &= ~(1<<RW);	// RW=0 Write operation
     230:	a9 98       	cbi	0x15, 1	; 21
	LCD_Command_Port |= (1<<EN);	// Enable pulse
     232:	aa 9a       	sbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     234:	85 e0       	ldi	r24, 0x05	; 5
     236:	8a 95       	dec	r24
     238:	f1 f7       	brne	.-4      	; 0x236 <LCD_Command+0xa>
     23a:	00 00       	nop
	_delay_us(1);
	LCD_Command_Port &= ~(1<<EN);
     23c:	aa 98       	cbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     23e:	8f ed       	ldi	r24, 0xDF	; 223
     240:	9e e2       	ldi	r25, 0x2E	; 46
     242:	01 97       	sbiw	r24, 0x01	; 1
     244:	f1 f7       	brne	.-4      	; 0x242 <LCD_Command+0x16>
     246:	00 c0       	rjmp	.+0      	; 0x248 <LCD_Command+0x1c>
     248:	00 00       	nop
     24a:	08 95       	ret

0000024c <LCD_Init>:
	_delay_ms(3);
}
void LCD_Init (void)			// LCD Initialize function
{
	LCD_Command_Dir = 0xFF;		// Make LCD command port direction as o/p
     24c:	8f ef       	ldi	r24, 0xFF	; 255
     24e:	84 bb       	out	0x14, r24	; 20
	LCD_Data_Dir = 0xFF;		// Make LCD data port direction as o/p
     250:	87 bb       	out	0x17, r24	; 23
     252:	2f ef       	ldi	r18, 0xFF	; 255
     254:	89 ef       	ldi	r24, 0xF9	; 249
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	21 50       	subi	r18, 0x01	; 1
     25a:	80 40       	sbci	r24, 0x00	; 0
     25c:	90 40       	sbci	r25, 0x00	; 0
     25e:	e1 f7       	brne	.-8      	; 0x258 <LCD_Init+0xc>
     260:	00 c0       	rjmp	.+0      	; 0x262 <LCD_Init+0x16>
     262:	00 00       	nop
	_delay_ms(20);			// LCD Power ON delay always >15ms
	
	LCD_Command (0x38);		// Initialization of 16X2 LCD in 8bit mode
     264:	88 e3       	ldi	r24, 0x38	; 56
     266:	e2 df       	rcall	.-60     	; 0x22c <LCD_Command>
	LCD_Command (0x0C);		// Display ON Cursor OFF
     268:	8c e0       	ldi	r24, 0x0C	; 12
     26a:	e0 df       	rcall	.-64     	; 0x22c <LCD_Command>
	LCD_Command (0x06);		// Auto Increment cursor
     26c:	86 e0       	ldi	r24, 0x06	; 6
     26e:	de df       	rcall	.-68     	; 0x22c <LCD_Command>
	LCD_Command (0x01);		// Clear display
     270:	81 e0       	ldi	r24, 0x01	; 1
     272:	dc df       	rcall	.-72     	; 0x22c <LCD_Command>
	LCD_Command (0x80);		// Cursor at home position *
     274:	80 e8       	ldi	r24, 0x80	; 128
     276:	da cf       	rjmp	.-76     	; 0x22c <LCD_Command>
     278:	08 95       	ret

0000027a <LCD_Char_space>:
     27a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <flag1.2216>
	}
}
unsigned char LCD_Char_space(void)
{
	static unsigned short flag1=FALSE,flag2=FALSE,count1=0;
	if(flag1==FALSE)
     27e:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <flag1.2216+0x1>
     282:	89 2b       	or	r24, r25
     284:	69 f4       	brne	.+26     	; 0x2a0 <LCD_Char_space+0x26>
	{
		LCD_Data_Port=' ';
     286:	80 e2       	ldi	r24, 0x20	; 32
     288:	88 bb       	out	0x18, r24	; 24
		LCD_Command_Port |= (1<<RS);	/* RS=1 Data reg. */
     28a:	a8 9a       	sbi	0x15, 0	; 21
		LCD_Command_Port &= ~(1<<RW);	/* RW=0 Write operation */
     28c:	a9 98       	cbi	0x15, 1	; 21
		LCD_Command_Port |= (1<<EN);	/* Enable pulse */
     28e:	aa 9a       	sbi	0x15, 2	; 21
		flag1=TRUE;
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <flag1.2216+0x1>
     298:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <flag1.2216>
		return 0;
     29c:	80 e0       	ldi	r24, 0x00	; 0
     29e:	08 95       	ret
	}
	else
	{
		if(flag2==FALSE)
     2a0:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <flag2.2217>
     2a4:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <flag2.2217+0x1>
     2a8:	89 2b       	or	r24, r25
     2aa:	d9 f4       	brne	.+54     	; 0x2e2 <LCD_Char_space+0x68>
		{
			if(count1<1)
     2ac:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <count1.2218>
     2b0:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <count1.2218+0x1>
     2b4:	89 2b       	or	r24, r25
     2b6:	41 f4       	brne	.+16     	; 0x2c8 <LCD_Char_space+0x4e>
			{
				count1++;
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <count1.2218+0x1>
     2c0:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <count1.2218>
				return 0;
     2c4:	80 e0       	ldi	r24, 0x00	; 0
     2c6:	08 95       	ret
			}
			else
			{
				LCD_Command_Port &= ~(1<<EN);
     2c8:	aa 98       	cbi	0x15, 2	; 21
				flag2=TRUE;
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <flag2.2217+0x1>
     2d2:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <flag2.2217>
				count1=0;
     2d6:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <count1.2218+0x1>
     2da:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <count1.2218>
				return 0;
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	08 95       	ret
			}
		}
		else
		{
			if(signal_on==TRUE)
     2e2:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <signal_on>
     2e6:	81 30       	cpi	r24, 0x01	; 1
     2e8:	89 f4       	brne	.+34     	; 0x30c <LCD_Char_space+0x92>
			{
				if(LCD_Char_O1()==1)
     2ea:	37 d4       	rcall	.+2158   	; 0xb5a <LCD_Char_O1>
     2ec:	81 30       	cpi	r24, 0x01	; 1
     2ee:	09 f0       	breq	.+2      	; 0x2f2 <LCD_Char_space+0x78>
     2f0:	46 c0       	rjmp	.+140    	; 0x37e <LCD_Char_space+0x104>
				{
					count1=0;
     2f2:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <count1.2218+0x1>
     2f6:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <count1.2218>
					flag1=FALSE;
     2fa:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <flag1.2216+0x1>
     2fe:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <flag1.2216>
					flag2=FALSE;
     302:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <flag2.2217+0x1>
     306:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <flag2.2217>
					return 1;
     30a:	08 95       	ret
				else
				{
					return 0;
				}
			}
			else if(signal_off==TRUE)
     30c:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <signal_off>
     310:	81 30       	cpi	r24, 0x01	; 1
			{
				if(LCD_Char_O2()==1)
     312:	81 f4       	brne	.+32     	; 0x334 <LCD_Char_space+0xba>
     314:	96 d3       	rcall	.+1836   	; 0xa42 <LCD_Char_O2>
     316:	81 30       	cpi	r24, 0x01	; 1
     318:	a1 f5       	brne	.+104    	; 0x382 <LCD_Char_space+0x108>
				{
					count1=0;
     31a:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <count1.2218+0x1>
     31e:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <count1.2218>
					flag1=FALSE;
     322:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <flag1.2216+0x1>
     326:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <flag1.2216>
					flag2=FALSE;
     32a:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <flag2.2217+0x1>
     32e:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <flag2.2217>
					return 1;
     332:	08 95       	ret
				else
				{
					return 0;
				}
			}
			else if(display_T==TRUE)
     334:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <display_T>
     338:	81 30       	cpi	r24, 0x01	; 1
     33a:	89 f4       	brne	.+34     	; 0x35e <LCD_Char_space+0xe4>
			{
				if(LCD_Char_space_fromT()==1)
     33c:	0e 94 49 0b 	call	0x1692	; 0x1692 <LCD_Char_space_fromT>
     340:	81 30       	cpi	r24, 0x01	; 1
     342:	09 f5       	brne	.+66     	; 0x386 <LCD_Char_space+0x10c>
				{
					count1=0;
     344:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <count1.2218+0x1>
     348:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <count1.2218>
					flag1=FALSE;
     34c:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <flag1.2216+0x1>
     350:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <flag1.2216>
					flag2=FALSE;
     354:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <flag2.2217+0x1>
     358:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <flag2.2217>
					return 0;
				}
			}
			else
			{
				if(LCD_Char_F()==TRUE)
     35c:	08 95       	ret
     35e:	59 d2       	rcall	.+1202   	; 0x812 <LCD_Char_F>
     360:	81 30       	cpi	r24, 0x01	; 1
     362:	99 f4       	brne	.+38     	; 0x38a <LCD_Char_space+0x110>
				{
					count1=0;
     364:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <count1.2218+0x1>
     368:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <count1.2218>
					flag1=FALSE;
     36c:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <flag1.2216+0x1>
     370:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <flag1.2216>
					flag2=FALSE;
     374:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <flag2.2217+0x1>
     378:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <flag2.2217>
					return 1;
     37c:	08 95       	ret
					flag2=FALSE;
					return 1;
				}
				else
				{
					return 0;
     37e:	80 e0       	ldi	r24, 0x00	; 0
     380:	08 95       	ret
					flag2=FALSE;
					return 1;
				}
				else
				{
					return 0;
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	08 95       	ret
					flag2=FALSE;
					return 1;
				}
				else
				{
					return 0;
     386:	80 e0       	ldi	r24, 0x00	; 0
     388:	08 95       	ret
					flag2=FALSE;
					return 1;
				}
				else
				{
					return 0;
     38a:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
		}
	}
}
     38c:	08 95       	ret

0000038e <LCD_Char_ch_1>:
	}
}
unsigned char LCD_Char_ch_1(void)
{
	static unsigned short flag1=FALSE,flag2=FALSE,count1=0;
	if(flag1==FALSE)
     38e:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <flag1.2192>
     392:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <flag1.2192+0x1>
     396:	89 2b       	or	r24, r25
     398:	69 f4       	brne	.+26     	; 0x3b4 <LCD_Char_ch_1+0x26>
	{
		LCD_Data_Port= '1';
     39a:	81 e3       	ldi	r24, 0x31	; 49
     39c:	88 bb       	out	0x18, r24	; 24
		LCD_Command_Port |= (1<<RS);	/* RS=1 Data reg. */
     39e:	a8 9a       	sbi	0x15, 0	; 21
		LCD_Command_Port &= ~(1<<RW);	/* RW=0 Write operation */
     3a0:	a9 98       	cbi	0x15, 1	; 21
		LCD_Command_Port |= (1<<EN);	/* Enable pulse */
     3a2:	aa 9a       	sbi	0x15, 2	; 21
		flag1=TRUE;
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <flag1.2192+0x1>
     3ac:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <flag1.2192>
		return 0;
     3b0:	80 e0       	ldi	r24, 0x00	; 0
     3b2:	08 95       	ret
	}
	else
	{
		if(flag2==FALSE)
     3b4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <flag2.2193>
     3b8:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <flag2.2193+0x1>
     3bc:	89 2b       	or	r24, r25
     3be:	d9 f4       	brne	.+54     	; 0x3f6 <LCD_Char_ch_1+0x68>
		{
			if(count1<1)
     3c0:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <count1.2194>
     3c4:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <count1.2194+0x1>
     3c8:	89 2b       	or	r24, r25
     3ca:	41 f4       	brne	.+16     	; 0x3dc <LCD_Char_ch_1+0x4e>
			{
				count1++;
     3cc:	81 e0       	ldi	r24, 0x01	; 1
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <count1.2194+0x1>
     3d4:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <count1.2194>
				return 0;
     3d8:	80 e0       	ldi	r24, 0x00	; 0
     3da:	08 95       	ret
			}
			else
			{
				LCD_Command_Port &= ~(1<<EN);
     3dc:	aa 98       	cbi	0x15, 2	; 21
				flag2=TRUE;
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <flag2.2193+0x1>
     3e6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <flag2.2193>
				count1=0;
     3ea:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <count1.2194+0x1>
     3ee:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <count1.2194>
				return 0;
     3f2:	80 e0       	ldi	r24, 0x00	; 0
     3f4:	08 95       	ret
			}
		}
		else
		{
			if(LCD_Char_space()==1)
     3f6:	41 df       	rcall	.-382    	; 0x27a <LCD_Char_space>
     3f8:	81 30       	cpi	r24, 0x01	; 1
     3fa:	69 f4       	brne	.+26     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
			{
				count1=0;
     3fc:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <count1.2194+0x1>
     400:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <count1.2194>
				flag1=FALSE;
     404:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <flag1.2192+0x1>
     408:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <flag1.2192>
				flag2=FALSE;
     40c:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <flag2.2193+0x1>
     410:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <flag2.2193>
				return 1;
     414:	08 95       	ret
			}
			else
			{
				return 0;
     416:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}
}
     418:	08 95       	ret

0000041a <LCD_Char_ch_2>:
unsigned char LCD_Char_ch_2(void)
{
	static unsigned short flag1=FALSE,flag2=FALSE,count1=0;
	if(flag1==FALSE)
     41a:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <flag1.2198>
     41e:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <flag1.2198+0x1>
     422:	89 2b       	or	r24, r25
     424:	69 f4       	brne	.+26     	; 0x440 <LCD_Char_ch_2+0x26>
	{
		LCD_Data_Port= '2';
     426:	82 e3       	ldi	r24, 0x32	; 50
     428:	88 bb       	out	0x18, r24	; 24
		LCD_Command_Port |= (1<<RS);	/* RS=1 Data reg. */
     42a:	a8 9a       	sbi	0x15, 0	; 21
		LCD_Command_Port &= ~(1<<RW);	/* RW=0 Write operation */
     42c:	a9 98       	cbi	0x15, 1	; 21
		LCD_Command_Port |= (1<<EN);	/* Enable pulse */
     42e:	aa 9a       	sbi	0x15, 2	; 21
		flag1=TRUE;
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <flag1.2198+0x1>
     438:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <flag1.2198>
		return 0;
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	08 95       	ret
	}
	else
	{
		if(flag2==FALSE)
     440:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <flag2.2199>
     444:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <flag2.2199+0x1>
     448:	89 2b       	or	r24, r25
     44a:	d9 f4       	brne	.+54     	; 0x482 <LCD_Char_ch_2+0x68>
		{
			if(count1<1)
     44c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <count1.2200>
     450:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <count1.2200+0x1>
     454:	89 2b       	or	r24, r25
     456:	41 f4       	brne	.+16     	; 0x468 <LCD_Char_ch_2+0x4e>
			{
				count1++;
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <count1.2200+0x1>
     460:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <count1.2200>
				return 0;
     464:	80 e0       	ldi	r24, 0x00	; 0
     466:	08 95       	ret
			}
			else
			{
				LCD_Command_Port &= ~(1<<EN);
     468:	aa 98       	cbi	0x15, 2	; 21
				flag2=TRUE;
     46a:	81 e0       	ldi	r24, 0x01	; 1
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <flag2.2199+0x1>
     472:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <flag2.2199>
				count1=0;
     476:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <count1.2200+0x1>
     47a:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <count1.2200>
				return 0;
     47e:	80 e0       	ldi	r24, 0x00	; 0
     480:	08 95       	ret
			}
		}
		else
		{
			if(LCD_Char_space()==1)
     482:	fb de       	rcall	.-522    	; 0x27a <LCD_Char_space>
     484:	81 30       	cpi	r24, 0x01	; 1
     486:	69 f4       	brne	.+26     	; 0x4a2 <LCD_Char_ch_2+0x88>
			{
				count1=0;
     488:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <count1.2200+0x1>
     48c:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <count1.2200>
				flag1=FALSE;
     490:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <flag1.2198+0x1>
     494:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <flag1.2198>
				flag2=FALSE;
     498:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <flag2.2199+0x1>
     49c:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <flag2.2199>
				return 1;
     4a0:	08 95       	ret
			}
			else
			{
				return 0;
     4a2:	80 e0       	ldi	r24, 0x00	; 0
				}
		}
	}
}
     4a4:	08 95       	ret

000004a6 <LCD_Char_ch_3>:
unsigned char LCD_Char_ch_3(void)
{
	static unsigned short flag1=FALSE,flag2=FALSE,count1=0;
	if(flag1==FALSE)
     4a6:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <flag1.2204>
     4aa:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <flag1.2204+0x1>
     4ae:	89 2b       	or	r24, r25
     4b0:	69 f4       	brne	.+26     	; 0x4cc <LCD_Char_ch_3+0x26>
	{
		LCD_Data_Port= '3';
     4b2:	83 e3       	ldi	r24, 0x33	; 51
     4b4:	88 bb       	out	0x18, r24	; 24
		LCD_Command_Port |= (1<<RS);	/* RS=1 Data reg. */
     4b6:	a8 9a       	sbi	0x15, 0	; 21
		LCD_Command_Port &= ~(1<<RW);	/* RW=0 Write operation */
     4b8:	a9 98       	cbi	0x15, 1	; 21
		LCD_Command_Port |= (1<<EN);	/* Enable pulse */
     4ba:	aa 9a       	sbi	0x15, 2	; 21
		flag1=TRUE;
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <flag1.2204+0x1>
     4c4:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <flag1.2204>
		return 0;
     4c8:	80 e0       	ldi	r24, 0x00	; 0
     4ca:	08 95       	ret
	}
	else
	{
		if(flag2==FALSE)
     4cc:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <flag2.2205>
     4d0:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <flag2.2205+0x1>
     4d4:	89 2b       	or	r24, r25
     4d6:	d9 f4       	brne	.+54     	; 0x50e <LCD_Char_ch_3+0x68>
		{
			if(count1<1)
     4d8:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <count1.2206>
     4dc:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <count1.2206+0x1>
     4e0:	89 2b       	or	r24, r25
     4e2:	41 f4       	brne	.+16     	; 0x4f4 <LCD_Char_ch_3+0x4e>
			{
				count1++;
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <count1.2206+0x1>
     4ec:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <count1.2206>
				return 0;
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	08 95       	ret
			}
			else
			{
				LCD_Command_Port &= ~(1<<EN);
     4f4:	aa 98       	cbi	0x15, 2	; 21
				flag2=TRUE;
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <flag2.2205+0x1>
     4fe:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <flag2.2205>
				count1=0;
     502:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <count1.2206+0x1>
     506:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <count1.2206>
				return 0;
     50a:	80 e0       	ldi	r24, 0x00	; 0
     50c:	08 95       	ret
			}
		}
		else
		{
			if(LCD_Char_space()==1)
     50e:	b5 de       	rcall	.-662    	; 0x27a <LCD_Char_space>
     510:	81 30       	cpi	r24, 0x01	; 1
     512:	69 f4       	brne	.+26     	; 0x52e <LCD_Char_ch_3+0x88>
			{
				count1=0;
     514:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <count1.2206+0x1>
     518:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <count1.2206>
				flag1=false;
     51c:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <flag1.2204+0x1>
     520:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <flag1.2204>
				flag2=FALSE;
     524:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <flag2.2205+0x1>
     528:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <flag2.2205>
				return 1;
     52c:	08 95       	ret
			}
			else
			{
				return 0;
     52e:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}
}
     530:	08 95       	ret

00000532 <LCD_Char_ch_4>:
unsigned char LCD_Char_ch_4(void)
{
	static unsigned short flag1=FALSE,flag2=FALSE,count1=0;
	if(flag1==FALSE)
     532:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <flag1.2210>
     536:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <flag1.2210+0x1>
     53a:	89 2b       	or	r24, r25
     53c:	69 f4       	brne	.+26     	; 0x558 <LCD_Char_ch_4+0x26>
	{
		LCD_Data_Port='4';
     53e:	84 e3       	ldi	r24, 0x34	; 52
     540:	88 bb       	out	0x18, r24	; 24
		LCD_Command_Port |= (1<<RS);	/* RS=1 Data reg. */
     542:	a8 9a       	sbi	0x15, 0	; 21
		LCD_Command_Port &= ~(1<<RW);	/* RW=0 Write operation */
     544:	a9 98       	cbi	0x15, 1	; 21
		LCD_Command_Port |= (1<<EN);	/* Enable pulse */
     546:	aa 9a       	sbi	0x15, 2	; 21
		flag1=TRUE;
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <flag1.2210+0x1>
     550:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <flag1.2210>
		return 0;
     554:	80 e0       	ldi	r24, 0x00	; 0
     556:	08 95       	ret
	}
	else
	{
		if(flag2==FALSE)
     558:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <flag2.2211>
     55c:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <flag2.2211+0x1>
     560:	89 2b       	or	r24, r25
     562:	d9 f4       	brne	.+54     	; 0x59a <LCD_Char_ch_4+0x68>
		{
			if(count1<1)
     564:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <count1.2212>
     568:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <count1.2212+0x1>
     56c:	89 2b       	or	r24, r25
     56e:	41 f4       	brne	.+16     	; 0x580 <LCD_Char_ch_4+0x4e>
			{
				count1++;
     570:	81 e0       	ldi	r24, 0x01	; 1
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <count1.2212+0x1>
     578:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <count1.2212>
				return 0;
     57c:	80 e0       	ldi	r24, 0x00	; 0
     57e:	08 95       	ret
			}
			else
			{
				LCD_Command_Port &= ~(1<<EN);
     580:	aa 98       	cbi	0x15, 2	; 21
				flag2=TRUE;
     582:	81 e0       	ldi	r24, 0x01	; 1
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <flag2.2211+0x1>
     58a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <flag2.2211>
				count1=0;
     58e:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <count1.2212+0x1>
     592:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <count1.2212>
				return 0;
     596:	80 e0       	ldi	r24, 0x00	; 0
     598:	08 95       	ret
			}
		}
		else
		{
			if(LCD_Char_space()==1)
     59a:	6f de       	rcall	.-802    	; 0x27a <LCD_Char_space>
     59c:	81 30       	cpi	r24, 0x01	; 1
     59e:	69 f4       	brne	.+26     	; 0x5ba <LCD_Char_ch_4+0x88>
			{
				count1=0;
     5a0:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <count1.2212+0x1>
     5a4:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <count1.2212>
				flag1=FALSE;
     5a8:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <flag1.2210+0x1>
     5ac:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <flag1.2210>
				flag2=FALSE;
     5b0:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <flag2.2211+0x1>
     5b4:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <flag2.2211>
				return 1;
     5b8:	08 95       	ret
			}
			else
			{
			return 0;
     5ba:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}
}
     5bc:	08 95       	ret

000005be <LCD_Char_C>:
		var_24us=FALSE;
	}
}
//---------------------------------------------------------------------------
unsigned char LCD_Char_C(void)
{
     5be:	cf 93       	push	r28
	static unsigned short flag1=FALSE,flag2=FALSE,count1=0;
	if(flag1==FALSE)
     5c0:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <flag1.2181>
     5c4:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <flag1.2181+0x1>
     5c8:	89 2b       	or	r24, r25
     5ca:	69 f4       	brne	.+26     	; 0x5e6 <LCD_Char_C+0x28>
	{
		LCD_Data_Port= 'C';
     5cc:	83 e4       	ldi	r24, 0x43	; 67
     5ce:	88 bb       	out	0x18, r24	; 24
		LCD_Command_Port |= (1<<RS);	/* RS=1 Data reg. */
     5d0:	a8 9a       	sbi	0x15, 0	; 21
		LCD_Command_Port &= ~(1<<RW);	/* RW=0 Write operation */
     5d2:	a9 98       	cbi	0x15, 1	; 21
		LCD_Command_Port |= (1<<EN);	/* Enable pulse */
     5d4:	aa 9a       	sbi	0x15, 2	; 21
		flag1=TRUE;
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <flag1.2181+0x1>
     5de:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <flag1.2181>
		return 0;
     5e2:	c0 e0       	ldi	r28, 0x00	; 0
     5e4:	77 c0       	rjmp	.+238    	; 0x6d4 <LCD_Char_C+0x116>
	}
	else
	{
		if(flag2==FALSE)
     5e6:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <flag2.2182>
     5ea:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <flag2.2182+0x1>
     5ee:	89 2b       	or	r24, r25
     5f0:	d9 f4       	brne	.+54     	; 0x628 <LCD_Char_C+0x6a>
		{
			if(count1<1)
     5f2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <count1.2183>
     5f6:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <count1.2183+0x1>
     5fa:	89 2b       	or	r24, r25
     5fc:	41 f4       	brne	.+16     	; 0x60e <LCD_Char_C+0x50>
			{
				count1++;
     5fe:	81 e0       	ldi	r24, 0x01	; 1
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <count1.2183+0x1>
     606:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <count1.2183>
				return 0;
     60a:	c0 e0       	ldi	r28, 0x00	; 0
     60c:	63 c0       	rjmp	.+198    	; 0x6d4 <LCD_Char_C+0x116>
			}
			else
			{
				LCD_Command_Port &= ~(1<<EN);
     60e:	aa 98       	cbi	0x15, 2	; 21
				flag2=TRUE;
     610:	81 e0       	ldi	r24, 0x01	; 1
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <flag2.2182+0x1>
     618:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <flag2.2182>
				count1=0;
     61c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <count1.2183+0x1>
     620:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <count1.2183>
				return 0;
     624:	c0 e0       	ldi	r28, 0x00	; 0
     626:	56 c0       	rjmp	.+172    	; 0x6d4 <LCD_Char_C+0x116>
			}
		}
		else
		{
			switch(channel_position)
     628:	c0 91 55 01 	lds	r28, 0x0155	; 0x800155 <channel_position>
     62c:	c1 30       	cpi	r28, 0x01	; 1
     62e:	c1 f0       	breq	.+48     	; 0x660 <LCD_Char_C+0xa2>
     630:	28 f0       	brcs	.+10     	; 0x63c <LCD_Char_C+0x7e>
     632:	c2 30       	cpi	r28, 0x02	; 2
     634:	31 f1       	breq	.+76     	; 0x682 <LCD_Char_C+0xc4>
     636:	c3 30       	cpi	r28, 0x03	; 3
     638:	a9 f1       	breq	.+106    	; 0x6a4 <LCD_Char_C+0xe6>
     63a:	45 c0       	rjmp	.+138    	; 0x6c6 <LCD_Char_C+0x108>
			{
				case 0:
				{
					//-------------------------------------------------------------------------
					if(LCD_Char_ch_1()==1)
     63c:	a8 de       	rcall	.-688    	; 0x38e <LCD_Char_ch_1>
     63e:	81 30       	cpi	r24, 0x01	; 1
     640:	09 f0       	breq	.+2      	; 0x644 <LCD_Char_C+0x86>
     642:	48 c0       	rjmp	.+144    	; 0x6d4 <LCD_Char_C+0x116>
					{
						count1=0;
     644:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <count1.2183+0x1>
     648:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <count1.2183>
						flag1=FALSE;
     64c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <flag1.2181+0x1>
     650:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <flag1.2181>
						flag2=FALSE;
     654:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <flag2.2182+0x1>
     658:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <flag2.2182>
						return 1;
     65c:	c8 2f       	mov	r28, r24
					}
				}
				case 1:
				{
					//---------------------------------------------------------------------------
					if(LCD_Char_ch_2()==1)
     65e:	3a c0       	rjmp	.+116    	; 0x6d4 <LCD_Char_C+0x116>
     660:	dc de       	rcall	.-584    	; 0x41a <LCD_Char_ch_2>
     662:	c8 2f       	mov	r28, r24
     664:	81 30       	cpi	r24, 0x01	; 1
     666:	89 f5       	brne	.+98     	; 0x6ca <LCD_Char_C+0x10c>
					{
						count1=0;
     668:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <count1.2183+0x1>
     66c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <count1.2183>
						flag1=FALSE;
     670:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <flag1.2181+0x1>
     674:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <flag1.2181>
						flag2=FALSE;
     678:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <flag2.2182+0x1>
     67c:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <flag2.2182>
					}
				}
				case 2:
				{
					//---------------------------------------------------------------------------
					if(LCD_Char_ch_3()==1)
     680:	29 c0       	rjmp	.+82     	; 0x6d4 <LCD_Char_C+0x116>
     682:	11 df       	rcall	.-478    	; 0x4a6 <LCD_Char_ch_3>
     684:	c8 2f       	mov	r28, r24
     686:	81 30       	cpi	r24, 0x01	; 1
     688:	11 f5       	brne	.+68     	; 0x6ce <LCD_Char_C+0x110>
					{
						count1=0;
     68a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <count1.2183+0x1>
     68e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <count1.2183>
						flag1=FALSE;
     692:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <flag1.2181+0x1>
     696:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <flag1.2181>
						flag2=FALSE;
     69a:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <flag2.2182+0x1>
     69e:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <flag2.2182>
					}
				}
				case 3:
				{
					//---------------------------------------------------------------------------
					if(LCD_Char_ch_4()==1)
     6a2:	18 c0       	rjmp	.+48     	; 0x6d4 <LCD_Char_C+0x116>
     6a4:	46 df       	rcall	.-372    	; 0x532 <LCD_Char_ch_4>
     6a6:	c8 2f       	mov	r28, r24
     6a8:	81 30       	cpi	r24, 0x01	; 1
     6aa:	99 f4       	brne	.+38     	; 0x6d2 <LCD_Char_C+0x114>
					{
						count1=0;
     6ac:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <count1.2183+0x1>
     6b0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <count1.2183>
						flag1=FALSE;
     6b4:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <flag1.2181+0x1>
     6b8:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <flag1.2181>
						flag2=FALSE;
     6bc:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <flag2.2182+0x1>
     6c0:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <flag2.2182>
						return 1;
     6c4:	07 c0       	rjmp	.+14     	; 0x6d4 <LCD_Char_C+0x116>
					else
					{
						return 0;
					}
				}
				default:return 0;
     6c6:	c0 e0       	ldi	r28, 0x00	; 0
     6c8:	05 c0       	rjmp	.+10     	; 0x6d4 <LCD_Char_C+0x116>
						flag2=FALSE;
						return 1;
					}
					else
					{
						return 0;
     6ca:	c0 e0       	ldi	r28, 0x00	; 0
     6cc:	03 c0       	rjmp	.+6      	; 0x6d4 <LCD_Char_C+0x116>
						flag2=FALSE;
						return 1;
					}
					else
					{
						return 0;
     6ce:	c0 e0       	ldi	r28, 0x00	; 0
     6d0:	01 c0       	rjmp	.+2      	; 0x6d4 <LCD_Char_C+0x116>
						flag2=FALSE;
						return 1;
					}
					else
					{
						return 0;
     6d2:	c0 e0       	ldi	r28, 0x00	; 0
				}
				default:return 0;
			}
		}
	}
}
     6d4:	8c 2f       	mov	r24, r28
     6d6:	cf 91       	pop	r28
     6d8:	08 95       	ret

000006da <LCD_String_start>:
	LCD_Command (0x80);		// Cursor at home position *
}
void LCD_String_start(void)
{
	static unsigned short flag1=FALSE,flag2=FALSE,count1=0;
	if(var_24us==TRUE)
     6da:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <var_24us>
     6de:	81 30       	cpi	r24, 0x01	; 1
     6e0:	09 f0       	breq	.+2      	; 0x6e4 <LCD_String_start+0xa>
     6e2:	50 c0       	rjmp	.+160    	; 0x784 <LCD_String_start+0xaa>
	{
		if(flag1==FALSE)
     6e4:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <flag1.2175>
     6e8:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <flag1.2175+0x1>
     6ec:	89 2b       	or	r24, r25
     6ee:	61 f4       	brne	.+24     	; 0x708 <LCD_String_start+0x2e>
		{
			LCD_Data_Port= 0x80;
     6f0:	80 e8       	ldi	r24, 0x80	; 128
     6f2:	88 bb       	out	0x18, r24	; 24
			LCD_Command_Port &= ~(1<<RS);	// RS=0 command reg.
     6f4:	a8 98       	cbi	0x15, 0	; 21
			LCD_Command_Port &= ~(1<<RW);	// RW=0 Write operation
     6f6:	a9 98       	cbi	0x15, 1	; 21
			LCD_Command_Port |= (1<<EN);	// Enable pulse
     6f8:	aa 9a       	sbi	0x15, 2	; 21
			flag1=TRUE;
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <flag1.2175+0x1>
     702:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <flag1.2175>
     706:	3c c0       	rjmp	.+120    	; 0x780 <LCD_String_start+0xa6>
		}
		else
		{
			if(flag2==FALSE)
     708:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <flag2.2176>
     70c:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <flag2.2176+0x1>
     710:	89 2b       	or	r24, r25
     712:	c9 f4       	brne	.+50     	; 0x746 <LCD_String_start+0x6c>
			{
				if(count1<1)
     714:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <count1.2177>
     718:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <count1.2177+0x1>
     71c:	89 2b       	or	r24, r25
     71e:	39 f4       	brne	.+14     	; 0x72e <LCD_String_start+0x54>
				{
					count1++;
     720:	81 e0       	ldi	r24, 0x01	; 1
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <count1.2177+0x1>
     728:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <count1.2177>
     72c:	29 c0       	rjmp	.+82     	; 0x780 <LCD_String_start+0xa6>
				}
				else
				{
					LCD_Command_Port &= ~(1<<EN);
     72e:	aa 98       	cbi	0x15, 2	; 21
					flag2=TRUE;
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <flag2.2176+0x1>
     738:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <flag2.2176>
					count1=0;
     73c:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <count1.2177+0x1>
     740:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <count1.2177>
     744:	1d c0       	rjmp	.+58     	; 0x780 <LCD_String_start+0xa6>
				}
			}
			else
			{
				if(count1<300)  //300*8us= 2.4ms necessary wait for 0x80 command
     746:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <count1.2177>
     74a:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <count1.2177+0x1>
     74e:	8c 32       	cpi	r24, 0x2C	; 44
     750:	21 e0       	ldi	r18, 0x01	; 1
     752:	92 07       	cpc	r25, r18
     754:	30 f4       	brcc	.+12     	; 0x762 <LCD_String_start+0x88>
				{
					count1++;
     756:	01 96       	adiw	r24, 0x01	; 1
     758:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <count1.2177+0x1>
     75c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <count1.2177>
     760:	0f c0       	rjmp	.+30     	; 0x780 <LCD_String_start+0xa6>
				}
				else
				{
					if(LCD_Char_C()==1)
     762:	2d df       	rcall	.-422    	; 0x5be <LCD_Char_C>
     764:	81 30       	cpi	r24, 0x01	; 1
     766:	61 f4       	brne	.+24     	; 0x780 <LCD_String_start+0xa6>
					{
						count1=0;
     768:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <count1.2177+0x1>
     76c:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <count1.2177>
						flag1=FALSE;
     770:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <flag1.2175+0x1>
     774:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <flag1.2175>
						flag2=FALSE;
     778:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <flag2.2176+0x1>
     77c:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <flag2.2176>
					}
				}
			}
		}
		var_24us=FALSE;
     780:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <var_24us>
     784:	08 95       	ret

00000786 <LCD_Char_U>:
	}
}
unsigned char LCD_Char_U(void)
{
	static unsigned short flag1=0,flag2=0,count1=0;
	if(flag1==0)
     786:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <flag1.2175>
     78a:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <flag1.2175+0x1>
     78e:	89 2b       	or	r24, r25
     790:	69 f4       	brne	.+26     	; 0x7ac <LCD_Char_U+0x26>
	{
		LCD_Data_Port='U';
     792:	85 e5       	ldi	r24, 0x55	; 85
     794:	88 bb       	out	0x18, r24	; 24
		LCD_Command_Port |= (1<<RS);	/* RS=1 Data reg. */
     796:	a8 9a       	sbi	0x15, 0	; 21
		LCD_Command_Port &= ~(1<<RW);	/* RW=0 Write operation */
     798:	a9 98       	cbi	0x15, 1	; 21
		LCD_Command_Port |= (1<<EN);	/* Enable pulse */
     79a:	aa 9a       	sbi	0x15, 2	; 21
		flag1=1;
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <flag1.2175+0x1>
     7a4:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <flag1.2175>
		return 0;
     7a8:	80 e0       	ldi	r24, 0x00	; 0
     7aa:	08 95       	ret
	}
	else
	{
		if(flag2==0)
     7ac:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <flag2.2176>
     7b0:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <flag2.2176+0x1>
     7b4:	89 2b       	or	r24, r25
     7b6:	d9 f4       	brne	.+54     	; 0x7ee <LCD_Char_U+0x68>
		{
			if(count1<1)
     7b8:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <count1.2177>
     7bc:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <count1.2177+0x1>
     7c0:	89 2b       	or	r24, r25
     7c2:	41 f4       	brne	.+16     	; 0x7d4 <LCD_Char_U+0x4e>
			{
				count1++;
     7c4:	81 e0       	ldi	r24, 0x01	; 1
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <count1.2177+0x1>
     7cc:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <count1.2177>
				return 0;
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	08 95       	ret
			}
			else
			{
				LCD_Command_Port &= ~(1<<EN);
     7d4:	aa 98       	cbi	0x15, 2	; 21
				flag2=1;
     7d6:	81 e0       	ldi	r24, 0x01	; 1
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <flag2.2176+0x1>
     7de:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <flag2.2176>
				count1=0;
     7e2:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <count1.2177+0x1>
     7e6:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <count1.2177>
				return 0;
     7ea:	80 e0       	ldi	r24, 0x00	; 0
     7ec:	08 95       	ret
			}
		}
		else
		{
			if(LCD_Char_ddot()==1)
     7ee:	af d6       	rcall	.+3422   	; 0x154e <LCD_Char_ddot>
     7f0:	81 30       	cpi	r24, 0x01	; 1
     7f2:	69 f4       	brne	.+26     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
			{
				count1=0;
     7f4:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <count1.2177+0x1>
     7f8:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <count1.2177>
				flag1=0;
     7fc:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <flag1.2175+0x1>
     800:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <flag1.2175>
				flag2=0;
     804:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <flag2.2176+0x1>
     808:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <flag2.2176>
				return 1;
     80c:	08 95       	ret
			}
			else
			{
				return 0;
     80e:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}
}
     810:	08 95       	ret

00000812 <LCD_Char_F>:
#include<header.h>

unsigned char LCD_Char_F(void)
{
	static unsigned short flag1=0,flag2=0,count1=0;
	if(flag1==0)
     812:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <flag1.2169>
     816:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <flag1.2169+0x1>
     81a:	89 2b       	or	r24, r25
     81c:	69 f4       	brne	.+26     	; 0x838 <LCD_Char_F+0x26>
	{
		LCD_Data_Port='F';
     81e:	86 e4       	ldi	r24, 0x46	; 70
     820:	88 bb       	out	0x18, r24	; 24
		LCD_Command_Port |= (1<<RS);	/* RS=1 Data reg. */
     822:	a8 9a       	sbi	0x15, 0	; 21
		LCD_Command_Port &= ~(1<<RW);	/* RW=0 Write operation */
     824:	a9 98       	cbi	0x15, 1	; 21
		LCD_Command_Port |= (1<<EN);	/* Enable pulse */
     826:	aa 9a       	sbi	0x15, 2	; 21
		flag1=1;
     828:	81 e0       	ldi	r24, 0x01	; 1
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <flag1.2169+0x1>
     830:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <flag1.2169>
		return 0;
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	08 95       	ret
	}
	else
	{
		if(flag2==0)
     838:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <flag2.2170>
     83c:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <flag2.2170+0x1>
     840:	89 2b       	or	r24, r25
     842:	d9 f4       	brne	.+54     	; 0x87a <__stack+0x1b>
		{
			if(count1<1)
     844:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <count1.2171>
     848:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <count1.2171+0x1>
     84c:	89 2b       	or	r24, r25
     84e:	41 f4       	brne	.+16     	; 0x860 <__stack+0x1>
			{
				count1++;
     850:	81 e0       	ldi	r24, 0x01	; 1
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <count1.2171+0x1>
     858:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <count1.2171>
				return 0;
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	08 95       	ret
			}
			else
			{
				LCD_Command_Port &= ~(1<<EN);
     860:	aa 98       	cbi	0x15, 2	; 21
				flag2=1;
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	90 93 9f 00 	sts	0x009F, r25	; 0x80009f <flag2.2170+0x1>
     86a:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <flag2.2170>
				count1=0;
     86e:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <count1.2171+0x1>
     872:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <count1.2171>
				return 0;
     876:	80 e0       	ldi	r24, 0x00	; 0
     878:	08 95       	ret
			}
		}
		else
		{
			if(LCD_Char_U()==1)
     87a:	85 df       	rcall	.-246    	; 0x786 <LCD_Char_U>
     87c:	81 30       	cpi	r24, 0x01	; 1
     87e:	69 f4       	brne	.+26     	; 0x89a <__stack+0x3b>
			{
				count1=0;
     880:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <count1.2171+0x1>
     884:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <count1.2171>
				flag1=0;
     888:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <flag1.2169+0x1>
     88c:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <flag1.2169>
				flag2=0;
     890:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <flag2.2170+0x1>
     894:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <flag2.2170>
				return 1;
     898:	08 95       	ret
			}
			else
			{
				return 0;
     89a:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}
}
     89c:	08 95       	ret

0000089e <LCD_Char_percent>:
	}
}
unsigned char LCD_Char_percent(void)
{
	static unsigned short flag1=0,flag2=0,count1=0;
	if(flag1==0)
     89e:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <flag1.2181>
     8a2:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <flag1.2181+0x1>
     8a6:	89 2b       	or	r24, r25
     8a8:	69 f4       	brne	.+26     	; 0x8c4 <LCD_Char_percent+0x26>
	{
		LCD_Data_Port='%';
     8aa:	85 e2       	ldi	r24, 0x25	; 37
     8ac:	88 bb       	out	0x18, r24	; 24
		LCD_Command_Port |= (1<<RS);	/* RS=1 Data reg. */
     8ae:	a8 9a       	sbi	0x15, 0	; 21
		LCD_Command_Port &= ~(1<<RW);	/* RW=0 Write operation */
     8b0:	a9 98       	cbi	0x15, 1	; 21
		LCD_Command_Port |= (1<<EN);	/* Enable pulse */
     8b2:	aa 9a       	sbi	0x15, 2	; 21
		flag1=1;
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <flag1.2181+0x1>
     8bc:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <flag1.2181>
		return 0;
     8c0:	80 e0       	ldi	r24, 0x00	; 0
     8c2:	08 95       	ret
	}
	else
	{
		if(flag2==0)
     8c4:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <flag2.2182>
     8c8:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <flag2.2182+0x1>
     8cc:	89 2b       	or	r24, r25
     8ce:	d9 f4       	brne	.+54     	; 0x906 <LCD_Char_percent+0x68>
		{
			if(count1<1)
     8d0:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <count1.2183>
     8d4:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <count1.2183+0x1>
     8d8:	89 2b       	or	r24, r25
     8da:	41 f4       	brne	.+16     	; 0x8ec <LCD_Char_percent+0x4e>
			{
				count1++;
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <count1.2183+0x1>
     8e4:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <count1.2183>
				return 0;
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	08 95       	ret
			}
			else
			{
				LCD_Command_Port &= ~(1<<EN);
     8ec:	aa 98       	cbi	0x15, 2	; 21
				flag2=1;
     8ee:	81 e0       	ldi	r24, 0x01	; 1
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	90 93 93 00 	sts	0x0093, r25	; 0x800093 <flag2.2182+0x1>
     8f6:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <flag2.2182>
				count1=0;
     8fa:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <count1.2183+0x1>
     8fe:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <count1.2183>
				return 0;
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	08 95       	ret
			}
		}
		else
		{
			if(LCD_Char_space3()==1)
     906:	9b d3       	rcall	.+1846   	; 0x103e <LCD_Char_space3>
     908:	81 30       	cpi	r24, 0x01	; 1
     90a:	69 f4       	brne	.+26     	; 0x926 <LCD_Char_percent+0x88>
			{
				count1=0;
     90c:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <count1.2183+0x1>
     910:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <count1.2183>
				flag1=0;
     914:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <flag1.2181+0x1>
     918:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <flag1.2181>
				flag2=0;
     91c:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <flag2.2182+0x1>
     920:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <flag2.2182>
				return 1;
     924:	08 95       	ret
			}
			else
			{
				return 0;
     926:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}
     928:	08 95       	ret

0000092a <LCD_Char_f2>:
	}
}
unsigned char LCD_Char_f2(void)
{
	static unsigned short flag1=0,flag2=0,count1=0;
	if(flag1==0)
     92a:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <flag1.2181>
     92e:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <flag1.2181+0x1>
     932:	89 2b       	or	r24, r25
     934:	69 f4       	brne	.+26     	; 0x950 <LCD_Char_f2+0x26>
	{
		LCD_Data_Port='f';
     936:	86 e6       	ldi	r24, 0x66	; 102
     938:	88 bb       	out	0x18, r24	; 24
		LCD_Command_Port |= (1<<RS);	/* RS=1 Data reg. */
     93a:	a8 9a       	sbi	0x15, 0	; 21
		LCD_Command_Port &= ~(1<<RW);	/* RW=0 Write operation */
     93c:	a9 98       	cbi	0x15, 1	; 21
		LCD_Command_Port |= (1<<EN);	/* Enable pulse */
     93e:	aa 9a       	sbi	0x15, 2	; 21
		flag1=1;
     940:	81 e0       	ldi	r24, 0x01	; 1
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <flag1.2181+0x1>
     948:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <flag1.2181>
		return 0;
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	08 95       	ret
	}
	else
	{
		if(flag2==0)
     950:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <flag2.2182>
     954:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <flag2.2182+0x1>
     958:	89 2b       	or	r24, r25
     95a:	d9 f4       	brne	.+54     	; 0x992 <LCD_Char_f2+0x68>
		{
			if(count1<1)
     95c:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <count1.2183>
     960:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <count1.2183+0x1>
     964:	89 2b       	or	r24, r25
     966:	41 f4       	brne	.+16     	; 0x978 <LCD_Char_f2+0x4e>
			{
				count1++;
     968:	81 e0       	ldi	r24, 0x01	; 1
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <count1.2183+0x1>
     970:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <count1.2183>
				return 0;
     974:	80 e0       	ldi	r24, 0x00	; 0
     976:	08 95       	ret
			}
			else
			{
				LCD_Command_Port &= ~(1<<EN);
     978:	aa 98       	cbi	0x15, 2	; 21
				flag2=1;
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <flag2.2182+0x1>
     982:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <flag2.2182>
				count1=0;
     986:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <count1.2183+0x1>
     98a:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <count1.2183>
				return 0;
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	08 95       	ret
			}
		}
		else
		{
			if(LCD_Char_space2()==1)
     992:	9b d3       	rcall	.+1846   	; 0x10ca <LCD_Char_space2>
     994:	81 30       	cpi	r24, 0x01	; 1
     996:	69 f4       	brne	.+26     	; 0x9b2 <LCD_Char_f2+0x88>
			{
				count1=0;
     998:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <count1.2183+0x1>
     99c:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <count1.2183>
				flag1=0;
     9a0:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <flag1.2181+0x1>
     9a4:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <flag1.2181>
				flag2=0;
     9a8:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <flag2.2182+0x1>
     9ac:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <flag2.2182>
				return 1;
     9b0:	08 95       	ret
			}
			else
			{
				return 0;
     9b2:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}
}
     9b4:	08 95       	ret

000009b6 <LCD_Char_f1>:
	}
}
unsigned char LCD_Char_f1(void)
{
	static unsigned short flag1=0,flag2=0,count1=0;
	if(flag1==0)
     9b6:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <flag1.2175>
     9ba:	90 91 ad 00 	lds	r25, 0x00AD	; 0x8000ad <flag1.2175+0x1>
     9be:	89 2b       	or	r24, r25
     9c0:	69 f4       	brne	.+26     	; 0x9dc <LCD_Char_f1+0x26>
	{
		LCD_Data_Port='f';
     9c2:	86 e6       	ldi	r24, 0x66	; 102
     9c4:	88 bb       	out	0x18, r24	; 24
		LCD_Command_Port |= (1<<RS);	/* RS=1 Data reg. */
     9c6:	a8 9a       	sbi	0x15, 0	; 21
		LCD_Command_Port &= ~(1<<RW);	/* RW=0 Write operation */
     9c8:	a9 98       	cbi	0x15, 1	; 21
		LCD_Command_Port |= (1<<EN);	/* Enable pulse */
     9ca:	aa 9a       	sbi	0x15, 2	; 21
		flag1=1;
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <flag1.2175+0x1>
     9d4:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <flag1.2175>
		return 0;
     9d8:	80 e0       	ldi	r24, 0x00	; 0
     9da:	08 95       	ret
	}
	else
	{
		if(flag2==0)
     9dc:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <flag2.2176>
     9e0:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <flag2.2176+0x1>
     9e4:	89 2b       	or	r24, r25
     9e6:	d9 f4       	brne	.+54     	; 0xa1e <LCD_Char_f1+0x68>
		{
			if(count1<1)
     9e8:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <count1.2177>
     9ec:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <count1.2177+0x1>
     9f0:	89 2b       	or	r24, r25
     9f2:	41 f4       	brne	.+16     	; 0xa04 <LCD_Char_f1+0x4e>
			{
				count1++;
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <count1.2177+0x1>
     9fc:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <count1.2177>
				return 0;
     a00:	80 e0       	ldi	r24, 0x00	; 0
     a02:	08 95       	ret
			}
			else
			{
				LCD_Command_Port &= ~(1<<EN);
     a04:	aa 98       	cbi	0x15, 2	; 21
				flag2=1;
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <flag2.2176+0x1>
     a0e:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <flag2.2176>
				count1=0;
     a12:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <count1.2177+0x1>
     a16:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <count1.2177>
				return 0;
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	08 95       	ret
			}
		}
		else
		{
			if(LCD_Char_f2()==1)
     a1e:	85 df       	rcall	.-246    	; 0x92a <LCD_Char_f2>
     a20:	81 30       	cpi	r24, 0x01	; 1
     a22:	69 f4       	brne	.+26     	; 0xa3e <LCD_Char_f1+0x88>
			{
				count1=0;
     a24:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <count1.2177+0x1>
     a28:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <count1.2177>
				flag1=0;
     a2c:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <flag1.2175+0x1>
     a30:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <flag1.2175>
				flag2=0;
     a34:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <flag2.2176+0x1>
     a38:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <flag2.2176>
				return 1;
     a3c:	08 95       	ret
			}
			else
			{
				return 0;
     a3e:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}
}
     a40:	08 95       	ret

00000a42 <LCD_Char_O2>:
#include<header.h>

unsigned char LCD_Char_O2(void)
{
	static unsigned short flag1=0,flag2=0,count1=0;
	if(flag1==0)
     a42:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <flag1.2169>
     a46:	90 91 b3 00 	lds	r25, 0x00B3	; 0x8000b3 <flag1.2169+0x1>
     a4a:	89 2b       	or	r24, r25
     a4c:	69 f4       	brne	.+26     	; 0xa68 <LCD_Char_O2+0x26>
	{
		LCD_Data_Port='O';
     a4e:	8f e4       	ldi	r24, 0x4F	; 79
     a50:	88 bb       	out	0x18, r24	; 24
		LCD_Command_Port |= (1<<RS);	/* RS=1 Data reg. */
     a52:	a8 9a       	sbi	0x15, 0	; 21
		LCD_Command_Port &= ~(1<<RW);	/* RW=0 Write operation */
     a54:	a9 98       	cbi	0x15, 1	; 21
		LCD_Command_Port |= (1<<EN);	/* Enable pulse */
     a56:	aa 9a       	sbi	0x15, 2	; 21
		flag1=1;
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <flag1.2169+0x1>
     a60:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <flag1.2169>
		return 0;
     a64:	80 e0       	ldi	r24, 0x00	; 0
     a66:	08 95       	ret
	}
	else
	{
		if(flag2==0)
     a68:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <flag2.2170>
     a6c:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <flag2.2170+0x1>
     a70:	89 2b       	or	r24, r25
     a72:	d9 f4       	brne	.+54     	; 0xaaa <LCD_Char_O2+0x68>
		{
			if(count1<1)
     a74:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <count1.2171>
     a78:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <count1.2171+0x1>
     a7c:	89 2b       	or	r24, r25
     a7e:	41 f4       	brne	.+16     	; 0xa90 <LCD_Char_O2+0x4e>
			{
				count1++;
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	90 93 af 00 	sts	0x00AF, r25	; 0x8000af <count1.2171+0x1>
     a88:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <count1.2171>
				return 0;
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 95       	ret
			}
			else
			{
				LCD_Command_Port &= ~(1<<EN);
     a90:	aa 98       	cbi	0x15, 2	; 21
				flag2=1;
     a92:	81 e0       	ldi	r24, 0x01	; 1
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <flag2.2170+0x1>
     a9a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <flag2.2170>
				count1=0;
     a9e:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <count1.2171+0x1>
     aa2:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <count1.2171>
				return 0;
     aa6:	80 e0       	ldi	r24, 0x00	; 0
     aa8:	08 95       	ret
			}
		}
		else
		{
			if(LCD_Char_f1()==1)
     aaa:	85 df       	rcall	.-246    	; 0x9b6 <LCD_Char_f1>
     aac:	81 30       	cpi	r24, 0x01	; 1
     aae:	69 f4       	brne	.+26     	; 0xaca <LCD_Char_O2+0x88>
			{
				count1=0;
     ab0:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <count1.2171+0x1>
     ab4:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <count1.2171>
				flag1=0;
     ab8:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <flag1.2169+0x1>
     abc:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <flag1.2169>
				flag2=0;
     ac0:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <flag2.2170+0x1>
     ac4:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <flag2.2170>
				return 1;
     ac8:	08 95       	ret
			}
			else
			{
				return 0;
     aca:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}
}
     acc:	08 95       	ret

00000ace <LCD_Char_n>:
	}
}
unsigned char LCD_Char_n(void)
{
	static unsigned short flag1=0,flag2=0,count1=0;
	if(flag1==0)
     ace:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <flag1.2175>
     ad2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <flag1.2175+0x1>
     ad6:	89 2b       	or	r24, r25
     ad8:	69 f4       	brne	.+26     	; 0xaf4 <LCD_Char_n+0x26>
	{
		LCD_Data_Port='n';
     ada:	8e e6       	ldi	r24, 0x6E	; 110
     adc:	88 bb       	out	0x18, r24	; 24
		LCD_Command_Port |= (1<<RS);	/* RS=1 Data reg. */
     ade:	a8 9a       	sbi	0x15, 0	; 21
		LCD_Command_Port &= ~(1<<RW);	/* RW=0 Write operation */
     ae0:	a9 98       	cbi	0x15, 1	; 21
		LCD_Command_Port |= (1<<EN);	/* Enable pulse */
     ae2:	aa 9a       	sbi	0x15, 2	; 21
		flag1=1;
     ae4:	81 e0       	ldi	r24, 0x01	; 1
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	90 93 b9 00 	sts	0x00B9, r25	; 0x8000b9 <flag1.2175+0x1>
     aec:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <flag1.2175>
		return 0;
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	08 95       	ret
	}
	else
	{
		if(flag2==0)
     af4:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <flag2.2176>
     af8:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <flag2.2176+0x1>
     afc:	89 2b       	or	r24, r25
     afe:	d9 f4       	brne	.+54     	; 0xb36 <LCD_Char_n+0x68>
		{
			if(count1<1)
     b00:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <count1.2177>
     b04:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <count1.2177+0x1>
     b08:	89 2b       	or	r24, r25
     b0a:	41 f4       	brne	.+16     	; 0xb1c <LCD_Char_n+0x4e>
			{
				count1++;
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	90 93 b5 00 	sts	0x00B5, r25	; 0x8000b5 <count1.2177+0x1>
     b14:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <count1.2177>
				return 0;
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	08 95       	ret
			}
			else
			{
				LCD_Command_Port &= ~(1<<EN);
     b1c:	aa 98       	cbi	0x15, 2	; 21
				flag2=1;
     b1e:	81 e0       	ldi	r24, 0x01	; 1
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	90 93 b7 00 	sts	0x00B7, r25	; 0x8000b7 <flag2.2176+0x1>
     b26:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <flag2.2176>
				count1=0;
     b2a:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <count1.2177+0x1>
     b2e:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <count1.2177>
				return 0;
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	08 95       	ret
			}
		}
		else
		{
			if(LCD_Char_space1()==1)
     b36:	0f d3       	rcall	.+1566   	; 0x1156 <LCD_Char_space1>
     b38:	81 30       	cpi	r24, 0x01	; 1
     b3a:	69 f4       	brne	.+26     	; 0xb56 <LCD_Char_n+0x88>
			{
				count1=0;
     b3c:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <count1.2177+0x1>
     b40:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <count1.2177>
				flag1=0;
     b44:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <flag1.2175+0x1>
     b48:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <flag1.2175>
				flag2=0;
     b4c:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <flag2.2176+0x1>
     b50:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <flag2.2176>
				return 1;
     b54:	08 95       	ret
			}
			else
			{
				return 0;
     b56:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}
}
     b58:	08 95       	ret

00000b5a <LCD_Char_O1>:
#include<header.h>

unsigned char LCD_Char_O1(void)
{
	static unsigned short flag1=0,flag2=0,count1=0;
	if(flag1==0)
     b5a:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <flag1.2169>
     b5e:	90 91 bf 00 	lds	r25, 0x00BF	; 0x8000bf <flag1.2169+0x1>
     b62:	89 2b       	or	r24, r25
     b64:	69 f4       	brne	.+26     	; 0xb80 <LCD_Char_O1+0x26>
	{
		LCD_Data_Port='O';
     b66:	8f e4       	ldi	r24, 0x4F	; 79
     b68:	88 bb       	out	0x18, r24	; 24
		LCD_Command_Port |= (1<<RS);	/* RS=1 Data reg. */
     b6a:	a8 9a       	sbi	0x15, 0	; 21
		LCD_Command_Port &= ~(1<<RW);	/* RW=0 Write operation */
     b6c:	a9 98       	cbi	0x15, 1	; 21
		LCD_Command_Port |= (1<<EN);	/* Enable pulse */
     b6e:	aa 9a       	sbi	0x15, 2	; 21
		flag1=1;
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	90 93 bf 00 	sts	0x00BF, r25	; 0x8000bf <flag1.2169+0x1>
     b78:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <flag1.2169>
		return 0;
     b7c:	80 e0       	ldi	r24, 0x00	; 0
     b7e:	08 95       	ret
	}
	else
	{
		if(flag2==0)
     b80:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <flag2.2170>
     b84:	90 91 bd 00 	lds	r25, 0x00BD	; 0x8000bd <flag2.2170+0x1>
     b88:	89 2b       	or	r24, r25
     b8a:	d9 f4       	brne	.+54     	; 0xbc2 <LCD_Char_O1+0x68>
		{
			if(count1<1)
     b8c:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <count1.2171>
     b90:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <count1.2171+0x1>
     b94:	89 2b       	or	r24, r25
     b96:	41 f4       	brne	.+16     	; 0xba8 <LCD_Char_O1+0x4e>
			{
				count1++;
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <count1.2171+0x1>
     ba0:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <count1.2171>
				return 0;
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	08 95       	ret
			}
			else
			{
				LCD_Command_Port &= ~(1<<EN);
     ba8:	aa 98       	cbi	0x15, 2	; 21
				flag2=1;
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	90 93 bd 00 	sts	0x00BD, r25	; 0x8000bd <flag2.2170+0x1>
     bb2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <flag2.2170>
				count1=0;
     bb6:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <count1.2171+0x1>
     bba:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <count1.2171>
				return 0;
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	08 95       	ret
			}
		}
		else
		{
			if(LCD_Char_n()==1)
     bc2:	85 df       	rcall	.-246    	; 0xace <LCD_Char_n>
     bc4:	81 30       	cpi	r24, 0x01	; 1
     bc6:	69 f4       	brne	.+26     	; 0xbe2 <LCD_Char_O1+0x88>
			{
				count1=0;
     bc8:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <count1.2171+0x1>
     bcc:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <count1.2171>
				flag1=0;
     bd0:	10 92 bf 00 	sts	0x00BF, r1	; 0x8000bf <flag1.2169+0x1>
     bd4:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <flag1.2169>
				flag2=0;
     bd8:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <flag2.2170+0x1>
     bdc:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <flag2.2170>
				return 1;
     be0:	08 95       	ret
			}
			else
			{
				return 0;
     be2:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}
}
     be4:	08 95       	ret

00000be6 <LCD_Char_space11>:
	}
}
unsigned char LCD_Char_space11(void)
{
	static unsigned short flag1=0,flag2=0,count1=0;
	if(flag1==0)
     be6:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <flag1.2229>
     bea:	90 91 c5 00 	lds	r25, 0x00C5	; 0x8000c5 <flag1.2229+0x1>
     bee:	89 2b       	or	r24, r25
     bf0:	69 f4       	brne	.+26     	; 0xc0c <LCD_Char_space11+0x26>
	{
		LCD_Data_Port=' ';
     bf2:	80 e2       	ldi	r24, 0x20	; 32
     bf4:	88 bb       	out	0x18, r24	; 24
		LCD_Command_Port |= (1<<RS);	// RS=1 Data reg.
     bf6:	a8 9a       	sbi	0x15, 0	; 21
		LCD_Command_Port &= ~(1<<RW);	// RW=0 Write operation
     bf8:	a9 98       	cbi	0x15, 1	; 21
		LCD_Command_Port |= (1<<EN);	// Enable pulse
     bfa:	aa 9a       	sbi	0x15, 2	; 21
		flag1=1;
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <flag1.2229+0x1>
     c04:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <flag1.2229>
		return 0;
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	08 95       	ret
	}
	else
	{
		if(flag2==0)
     c0c:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <flag2.2230>
     c10:	90 91 c3 00 	lds	r25, 0x00C3	; 0x8000c3 <flag2.2230+0x1>
     c14:	89 2b       	or	r24, r25
     c16:	d9 f4       	brne	.+54     	; 0xc4e <LCD_Char_space11+0x68>
		{
			if(count1<1)
     c18:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <count1.2231>
     c1c:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <count1.2231+0x1>
     c20:	89 2b       	or	r24, r25
     c22:	41 f4       	brne	.+16     	; 0xc34 <LCD_Char_space11+0x4e>
			{
				count1++;
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <count1.2231+0x1>
     c2c:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <count1.2231>
				return 0;
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	08 95       	ret
			}
			else
			{
				LCD_Command_Port &= ~(1<<EN);
     c34:	aa 98       	cbi	0x15, 2	; 21
				flag2=1;
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	90 93 c3 00 	sts	0x00C3, r25	; 0x8000c3 <flag2.2230+0x1>
     c3e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <flag2.2230>
				count1=0;
     c42:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <count1.2231+0x1>
     c46:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <count1.2231>
				return 0;
     c4a:	80 e0       	ldi	r24, 0x00	; 0
     c4c:	08 95       	ret
			}
		}
		else
		{
			count1=0;
     c4e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <count1.2231+0x1>
     c52:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <count1.2231>
			flag1=0;
     c56:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <flag1.2229+0x1>
     c5a:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <flag1.2229>
			flag2=0;
     c5e:	10 92 c3 00 	sts	0x00C3, r1	; 0x8000c3 <flag2.2230+0x1>
     c62:	10 92 c2 00 	sts	0x00C2, r1	; 0x8000c2 <flag2.2230>
			return 1;
     c66:	81 e0       	ldi	r24, 0x01	; 1
			
		}
	}
}
     c68:	08 95       	ret

00000c6a <LCD_Char_space10>:
	}
}
unsigned char LCD_Char_space10(void)
{
	static unsigned short flag1=0,flag2=0,count1=0;
	if(flag1==0)
     c6a:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <flag1.2223>
     c6e:	90 91 cb 00 	lds	r25, 0x00CB	; 0x8000cb <flag1.2223+0x1>
     c72:	89 2b       	or	r24, r25
     c74:	69 f4       	brne	.+26     	; 0xc90 <LCD_Char_space10+0x26>
	{
		LCD_Data_Port=' ';
     c76:	80 e2       	ldi	r24, 0x20	; 32
     c78:	88 bb       	out	0x18, r24	; 24
		LCD_Command_Port |= (1<<RS);	// RS=1 Data reg.
     c7a:	a8 9a       	sbi	0x15, 0	; 21
		LCD_Command_Port &= ~(1<<RW);	// RW=0 Write operation
     c7c:	a9 98       	cbi	0x15, 1	; 21
		LCD_Command_Port |= (1<<EN);	// Enable pulse
     c7e:	aa 9a       	sbi	0x15, 2	; 21
		flag1=1;
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	90 93 cb 00 	sts	0x00CB, r25	; 0x8000cb <flag1.2223+0x1>
     c88:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <flag1.2223>
		return 0;
     c8c:	80 e0       	ldi	r24, 0x00	; 0
     c8e:	08 95       	ret
	}
	else
	{
		if(flag2==0)
     c90:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <flag2.2224>
     c94:	90 91 c9 00 	lds	r25, 0x00C9	; 0x8000c9 <flag2.2224+0x1>
     c98:	89 2b       	or	r24, r25
     c9a:	d9 f4       	brne	.+54     	; 0xcd2 <LCD_Char_space10+0x68>
		{
			if(count1<1)
     c9c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <count1.2225>
     ca0:	90 91 c7 00 	lds	r25, 0x00C7	; 0x8000c7 <count1.2225+0x1>
     ca4:	89 2b       	or	r24, r25
     ca6:	41 f4       	brne	.+16     	; 0xcb8 <LCD_Char_space10+0x4e>
			{
				count1++;
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	90 93 c7 00 	sts	0x00C7, r25	; 0x8000c7 <count1.2225+0x1>
     cb0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <count1.2225>
				return 0;
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	08 95       	ret
			}
			else
			{
				LCD_Command_Port &= ~(1<<EN);
     cb8:	aa 98       	cbi	0x15, 2	; 21
				flag2=1;
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	90 93 c9 00 	sts	0x00C9, r25	; 0x8000c9 <flag2.2224+0x1>
     cc2:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <flag2.2224>
				count1=0;
     cc6:	10 92 c7 00 	sts	0x00C7, r1	; 0x8000c7 <count1.2225+0x1>
     cca:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <count1.2225>
				return 0;
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	08 95       	ret
			}
		}
		else
		{
			if(LCD_Char_space11()==1)
     cd2:	89 df       	rcall	.-238    	; 0xbe6 <LCD_Char_space11>
     cd4:	81 30       	cpi	r24, 0x01	; 1
     cd6:	69 f4       	brne	.+26     	; 0xcf2 <LCD_Char_space10+0x88>
			{
				count1=0;
     cd8:	10 92 c7 00 	sts	0x00C7, r1	; 0x8000c7 <count1.2225+0x1>
     cdc:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <count1.2225>
				flag1=0;
     ce0:	10 92 cb 00 	sts	0x00CB, r1	; 0x8000cb <flag1.2223+0x1>
     ce4:	10 92 ca 00 	sts	0x00CA, r1	; 0x8000ca <flag1.2223>
				flag2=0;
     ce8:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <flag2.2224+0x1>
     cec:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <flag2.2224>
				return 1;
     cf0:	08 95       	ret
			}
			else
			{
				return 0;
     cf2:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}
}
     cf4:	08 95       	ret

00000cf6 <LCD_Char_space9>:
	}
}
unsigned char LCD_Char_space9(void)
{
	static unsigned short flag1=0,flag2=0,count1=0;
	if(flag1==0)
     cf6:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <flag1.2217>
     cfa:	90 91 d1 00 	lds	r25, 0x00D1	; 0x8000d1 <flag1.2217+0x1>
     cfe:	89 2b       	or	r24, r25
     d00:	69 f4       	brne	.+26     	; 0xd1c <LCD_Char_space9+0x26>
	{
		LCD_Data_Port=' ';
     d02:	80 e2       	ldi	r24, 0x20	; 32
     d04:	88 bb       	out	0x18, r24	; 24
		LCD_Command_Port |= (1<<RS);	// RS=1 Data reg. 
     d06:	a8 9a       	sbi	0x15, 0	; 21
		LCD_Command_Port &= ~(1<<RW);	// RW=0 Write operation 
     d08:	a9 98       	cbi	0x15, 1	; 21
		LCD_Command_Port |= (1<<EN);	// Enable pulse 
     d0a:	aa 9a       	sbi	0x15, 2	; 21
		flag1=1;
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	90 93 d1 00 	sts	0x00D1, r25	; 0x8000d1 <flag1.2217+0x1>
     d14:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <flag1.2217>
		return 0;
     d18:	80 e0       	ldi	r24, 0x00	; 0
     d1a:	08 95       	ret
	}
	else
	{
		if(flag2==0)
     d1c:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <flag2.2218>
     d20:	90 91 cf 00 	lds	r25, 0x00CF	; 0x8000cf <flag2.2218+0x1>
     d24:	89 2b       	or	r24, r25
     d26:	d9 f4       	brne	.+54     	; 0xd5e <LCD_Char_space9+0x68>
		{
			if(count1<1)
     d28:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <count1.2219>
     d2c:	90 91 cd 00 	lds	r25, 0x00CD	; 0x8000cd <count1.2219+0x1>
     d30:	89 2b       	or	r24, r25
     d32:	41 f4       	brne	.+16     	; 0xd44 <LCD_Char_space9+0x4e>
			{
				count1++;
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <count1.2219+0x1>
     d3c:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <count1.2219>
				return 0;
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	08 95       	ret
			}
			else
			{
				LCD_Command_Port &= ~(1<<EN);
     d44:	aa 98       	cbi	0x15, 2	; 21
				flag2=1;
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	90 93 cf 00 	sts	0x00CF, r25	; 0x8000cf <flag2.2218+0x1>
     d4e:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <flag2.2218>
				count1=0;
     d52:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <count1.2219+0x1>
     d56:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <count1.2219>
				return 0;
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	08 95       	ret
			}
		}
		else
		{
			if(LCD_Char_space10()==1)
     d5e:	85 df       	rcall	.-246    	; 0xc6a <LCD_Char_space10>
     d60:	81 30       	cpi	r24, 0x01	; 1
     d62:	69 f4       	brne	.+26     	; 0xd7e <LCD_Char_space9+0x88>
			{
				count1=0;
     d64:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <count1.2219+0x1>
     d68:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <count1.2219>
				flag1=0;
     d6c:	10 92 d1 00 	sts	0x00D1, r1	; 0x8000d1 <flag1.2217+0x1>
     d70:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <flag1.2217>
				flag2=0;
     d74:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <flag2.2218+0x1>
     d78:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <flag2.2218>
				return 1;
     d7c:	08 95       	ret
			}
			else
			{
				return 0;
     d7e:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}
}
     d80:	08 95       	ret

00000d82 <LCD_Char_space8>:
}

unsigned char LCD_Char_space8(void)
{
	static unsigned short flag1=0,flag2=0,count1=0;
	if(flag1==0)
     d82:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <flag1.2211>
     d86:	90 91 d7 00 	lds	r25, 0x00D7	; 0x8000d7 <flag1.2211+0x1>
     d8a:	89 2b       	or	r24, r25
     d8c:	69 f4       	brne	.+26     	; 0xda8 <LCD_Char_space8+0x26>
	{
		LCD_Data_Port=' ';
     d8e:	80 e2       	ldi	r24, 0x20	; 32
     d90:	88 bb       	out	0x18, r24	; 24
		LCD_Command_Port |= (1<<RS);	// RS=1 Data reg. 
     d92:	a8 9a       	sbi	0x15, 0	; 21
		LCD_Command_Port &= ~(1<<RW);	// RW=0 Write operation 
     d94:	a9 98       	cbi	0x15, 1	; 21
		LCD_Command_Port |= (1<<EN);	// Enable pulse 
     d96:	aa 9a       	sbi	0x15, 2	; 21
		flag1=1;
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	90 93 d7 00 	sts	0x00D7, r25	; 0x8000d7 <flag1.2211+0x1>
     da0:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <flag1.2211>
		return 0;
     da4:	80 e0       	ldi	r24, 0x00	; 0
     da6:	08 95       	ret
	}
	else
	{
		if(flag2==0)
     da8:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <flag2.2212>
     dac:	90 91 d5 00 	lds	r25, 0x00D5	; 0x8000d5 <flag2.2212+0x1>
     db0:	89 2b       	or	r24, r25
     db2:	d9 f4       	brne	.+54     	; 0xdea <LCD_Char_space8+0x68>
		{
			if(count1<1)
     db4:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <count1.2213>
     db8:	90 91 d3 00 	lds	r25, 0x00D3	; 0x8000d3 <count1.2213+0x1>
     dbc:	89 2b       	or	r24, r25
     dbe:	41 f4       	brne	.+16     	; 0xdd0 <LCD_Char_space8+0x4e>
			{
				count1++;
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	90 93 d3 00 	sts	0x00D3, r25	; 0x8000d3 <count1.2213+0x1>
     dc8:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <count1.2213>
				return 0;
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	08 95       	ret
			}
			else
			{
				LCD_Command_Port &= ~(1<<EN);
     dd0:	aa 98       	cbi	0x15, 2	; 21
				flag2=1;
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	90 93 d5 00 	sts	0x00D5, r25	; 0x8000d5 <flag2.2212+0x1>
     dda:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <flag2.2212>
				count1=0;
     dde:	10 92 d3 00 	sts	0x00D3, r1	; 0x8000d3 <count1.2213+0x1>
     de2:	10 92 d2 00 	sts	0x00D2, r1	; 0x8000d2 <count1.2213>
				return 0;
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	08 95       	ret
			}
		}
		else
		{
			if(LCD_Char_space9()==1)
     dea:	85 df       	rcall	.-246    	; 0xcf6 <LCD_Char_space9>
     dec:	81 30       	cpi	r24, 0x01	; 1
     dee:	69 f4       	brne	.+26     	; 0xe0a <LCD_Char_space8+0x88>
			{
				count1=0;
     df0:	10 92 d3 00 	sts	0x00D3, r1	; 0x8000d3 <count1.2213+0x1>
     df4:	10 92 d2 00 	sts	0x00D2, r1	; 0x8000d2 <count1.2213>
				flag1=0;
     df8:	10 92 d7 00 	sts	0x00D7, r1	; 0x8000d7 <flag1.2211+0x1>
     dfc:	10 92 d6 00 	sts	0x00D6, r1	; 0x8000d6 <flag1.2211>
				flag2=0;
     e00:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <flag2.2212+0x1>
     e04:	10 92 d4 00 	sts	0x00D4, r1	; 0x8000d4 <flag2.2212>
				return 1;
     e08:	08 95       	ret
			}
			else
			{
				return 0;
     e0a:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}
}
     e0c:	08 95       	ret

00000e0e <LCD_Char_space7>:
	}
}
unsigned char LCD_Char_space7(void)
{
	static unsigned short flag1=0,flag2=0,count1=0;
	if(flag1==0)
     e0e:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <flag1.2205>
     e12:	90 91 dd 00 	lds	r25, 0x00DD	; 0x8000dd <flag1.2205+0x1>
     e16:	89 2b       	or	r24, r25
     e18:	69 f4       	brne	.+26     	; 0xe34 <LCD_Char_space7+0x26>
	{
		LCD_Data_Port=' ';
     e1a:	80 e2       	ldi	r24, 0x20	; 32
     e1c:	88 bb       	out	0x18, r24	; 24
		LCD_Command_Port |= (1<<RS);	/* RS=1 Data reg. */
     e1e:	a8 9a       	sbi	0x15, 0	; 21
		LCD_Command_Port &= ~(1<<RW);	/* RW=0 Write operation */
     e20:	a9 98       	cbi	0x15, 1	; 21
		LCD_Command_Port |= (1<<EN);	/* Enable pulse */
     e22:	aa 9a       	sbi	0x15, 2	; 21
		flag1=1;
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	90 93 dd 00 	sts	0x00DD, r25	; 0x8000dd <flag1.2205+0x1>
     e2c:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <flag1.2205>
		return 0;
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	08 95       	ret
	}
	else
	{
		if(flag2==0)
     e34:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <flag2.2206>
     e38:	90 91 db 00 	lds	r25, 0x00DB	; 0x8000db <flag2.2206+0x1>
     e3c:	89 2b       	or	r24, r25
     e3e:	d9 f4       	brne	.+54     	; 0xe76 <LCD_Char_space7+0x68>
		{
			if(count1<1)
     e40:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <count1.2207>
     e44:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <count1.2207+0x1>
     e48:	89 2b       	or	r24, r25
     e4a:	41 f4       	brne	.+16     	; 0xe5c <LCD_Char_space7+0x4e>
			{
				count1++;
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	90 93 d9 00 	sts	0x00D9, r25	; 0x8000d9 <count1.2207+0x1>
     e54:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <count1.2207>
				return 0;
     e58:	80 e0       	ldi	r24, 0x00	; 0
     e5a:	08 95       	ret
			}
			else
			{
				LCD_Command_Port &= ~(1<<EN);
     e5c:	aa 98       	cbi	0x15, 2	; 21
				flag2=1;
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	90 93 db 00 	sts	0x00DB, r25	; 0x8000db <flag2.2206+0x1>
     e66:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <flag2.2206>
				count1=0;
     e6a:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <count1.2207+0x1>
     e6e:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <count1.2207>
				return 0;
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	08 95       	ret
			}
		}
		else
		{
			if(LCD_Char_space8()==1)
     e76:	85 df       	rcall	.-246    	; 0xd82 <LCD_Char_space8>
     e78:	81 30       	cpi	r24, 0x01	; 1
     e7a:	69 f4       	brne	.+26     	; 0xe96 <LCD_Char_space7+0x88>
			{
				count1=0;
     e7c:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <count1.2207+0x1>
     e80:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <count1.2207>
				flag1=0;
     e84:	10 92 dd 00 	sts	0x00DD, r1	; 0x8000dd <flag1.2205+0x1>
     e88:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <flag1.2205>
				flag2=0;
     e8c:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <flag2.2206+0x1>
     e90:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <flag2.2206>
				return 1;
     e94:	08 95       	ret
			}
			else
			{
				return 0;
     e96:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}
}
     e98:	08 95       	ret

00000e9a <LCD_Char_space6>:
	}
}
unsigned char LCD_Char_space6(void)
{
	static unsigned short flag1=0,flag2=0,count1=0;
	if(flag1==0)
     e9a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <flag1.2199>
     e9e:	90 91 e3 00 	lds	r25, 0x00E3	; 0x8000e3 <flag1.2199+0x1>
     ea2:	89 2b       	or	r24, r25
     ea4:	69 f4       	brne	.+26     	; 0xec0 <LCD_Char_space6+0x26>
	{
		LCD_Data_Port=' ';
     ea6:	80 e2       	ldi	r24, 0x20	; 32
     ea8:	88 bb       	out	0x18, r24	; 24
		LCD_Command_Port |= (1<<RS);	/* RS=1 Data reg. */
     eaa:	a8 9a       	sbi	0x15, 0	; 21
		LCD_Command_Port &= ~(1<<RW);	/* RW=0 Write operation */
     eac:	a9 98       	cbi	0x15, 1	; 21
		LCD_Command_Port |= (1<<EN);	/* Enable pulse */
     eae:	aa 9a       	sbi	0x15, 2	; 21
		flag1=1;
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	90 93 e3 00 	sts	0x00E3, r25	; 0x8000e3 <flag1.2199+0x1>
     eb8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <flag1.2199>
		return 0;
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	08 95       	ret
	}
	else
	{
		if(flag2==0)
     ec0:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <flag2.2200>
     ec4:	90 91 e1 00 	lds	r25, 0x00E1	; 0x8000e1 <flag2.2200+0x1>
     ec8:	89 2b       	or	r24, r25
     eca:	d9 f4       	brne	.+54     	; 0xf02 <LCD_Char_space6+0x68>
		{
			if(count1<1)
     ecc:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <count1.2201>
     ed0:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <count1.2201+0x1>
     ed4:	89 2b       	or	r24, r25
     ed6:	41 f4       	brne	.+16     	; 0xee8 <LCD_Char_space6+0x4e>
			{
				count1++;
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	90 93 df 00 	sts	0x00DF, r25	; 0x8000df <count1.2201+0x1>
     ee0:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <count1.2201>
				return 0;
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	08 95       	ret
			}
			else
			{
				LCD_Command_Port &= ~(1<<EN);
     ee8:	aa 98       	cbi	0x15, 2	; 21
				flag2=1;
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	90 93 e1 00 	sts	0x00E1, r25	; 0x8000e1 <flag2.2200+0x1>
     ef2:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <flag2.2200>
				count1=0;
     ef6:	10 92 df 00 	sts	0x00DF, r1	; 0x8000df <count1.2201+0x1>
     efa:	10 92 de 00 	sts	0x00DE, r1	; 0x8000de <count1.2201>
				return 0;
     efe:	80 e0       	ldi	r24, 0x00	; 0
     f00:	08 95       	ret
			}
		}
		else
		{
			if(LCD_Char_space7()==1)
     f02:	85 df       	rcall	.-246    	; 0xe0e <LCD_Char_space7>
     f04:	81 30       	cpi	r24, 0x01	; 1
     f06:	69 f4       	brne	.+26     	; 0xf22 <LCD_Char_space6+0x88>
			{
				count1=0;
     f08:	10 92 df 00 	sts	0x00DF, r1	; 0x8000df <count1.2201+0x1>
     f0c:	10 92 de 00 	sts	0x00DE, r1	; 0x8000de <count1.2201>
				flag1=0;
     f10:	10 92 e3 00 	sts	0x00E3, r1	; 0x8000e3 <flag1.2199+0x1>
     f14:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <flag1.2199>
				flag2=0;
     f18:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <flag2.2200+0x1>
     f1c:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <flag2.2200>
				return 1;
     f20:	08 95       	ret
			}
			else
			{
				return 0;
     f22:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}
}
     f24:	08 95       	ret

00000f26 <LCD_Char_space5>:
	}
}
unsigned char LCD_Char_space5(void)
{
	static unsigned short flag1=0,flag2=0,count1=0;
	if(flag1==0)
     f26:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <flag1.2193>
     f2a:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <flag1.2193+0x1>
     f2e:	89 2b       	or	r24, r25
     f30:	69 f4       	brne	.+26     	; 0xf4c <LCD_Char_space5+0x26>
	{
		LCD_Data_Port=' ';
     f32:	80 e2       	ldi	r24, 0x20	; 32
     f34:	88 bb       	out	0x18, r24	; 24
		LCD_Command_Port |= (1<<RS);	/* RS=1 Data reg. */
     f36:	a8 9a       	sbi	0x15, 0	; 21
		LCD_Command_Port &= ~(1<<RW);	/* RW=0 Write operation */
     f38:	a9 98       	cbi	0x15, 1	; 21
		LCD_Command_Port |= (1<<EN);	/* Enable pulse */
     f3a:	aa 9a       	sbi	0x15, 2	; 21
		flag1=1;
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <flag1.2193+0x1>
     f44:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <flag1.2193>
		return 0;
     f48:	80 e0       	ldi	r24, 0x00	; 0
     f4a:	08 95       	ret
	}
	else
	{
		if(flag2==0)
     f4c:	80 91 e6 00 	lds	r24, 0x00E6	; 0x8000e6 <flag2.2194>
     f50:	90 91 e7 00 	lds	r25, 0x00E7	; 0x8000e7 <flag2.2194+0x1>
     f54:	89 2b       	or	r24, r25
     f56:	d9 f4       	brne	.+54     	; 0xf8e <LCD_Char_space5+0x68>
		{
			if(count1<1)
     f58:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <count1.2195>
     f5c:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <count1.2195+0x1>
     f60:	89 2b       	or	r24, r25
     f62:	41 f4       	brne	.+16     	; 0xf74 <LCD_Char_space5+0x4e>
			{
				count1++;
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	90 93 e5 00 	sts	0x00E5, r25	; 0x8000e5 <count1.2195+0x1>
     f6c:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <count1.2195>
				return 0;
     f70:	80 e0       	ldi	r24, 0x00	; 0
     f72:	08 95       	ret
			}
			else
			{
				LCD_Command_Port &= ~(1<<EN);
     f74:	aa 98       	cbi	0x15, 2	; 21
				flag2=1;
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	90 93 e7 00 	sts	0x00E7, r25	; 0x8000e7 <flag2.2194+0x1>
     f7e:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <flag2.2194>
				count1=0;
     f82:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <count1.2195+0x1>
     f86:	10 92 e4 00 	sts	0x00E4, r1	; 0x8000e4 <count1.2195>
				return 0;
     f8a:	80 e0       	ldi	r24, 0x00	; 0
     f8c:	08 95       	ret
			}
		}
		else
		{
			if(LCD_Char_space6()==1)
     f8e:	85 df       	rcall	.-246    	; 0xe9a <LCD_Char_space6>
     f90:	81 30       	cpi	r24, 0x01	; 1
     f92:	69 f4       	brne	.+26     	; 0xfae <LCD_Char_space5+0x88>
			{
				count1=0;
     f94:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <count1.2195+0x1>
     f98:	10 92 e4 00 	sts	0x00E4, r1	; 0x8000e4 <count1.2195>
				flag1=0;
     f9c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <flag1.2193+0x1>
     fa0:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <flag1.2193>
				flag2=0;
     fa4:	10 92 e7 00 	sts	0x00E7, r1	; 0x8000e7 <flag2.2194+0x1>
     fa8:	10 92 e6 00 	sts	0x00E6, r1	; 0x8000e6 <flag2.2194>
				return 1;
     fac:	08 95       	ret
			}
			else
			{
				return 0;
     fae:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}
}
     fb0:	08 95       	ret

00000fb2 <LCD_Char_space4>:
	}
}
unsigned char LCD_Char_space4(void)
{
	static unsigned short flag1=0,flag2=0,count1=0;
	if(flag1==0)
     fb2:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <flag1.2187>
     fb6:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <flag1.2187+0x1>
     fba:	89 2b       	or	r24, r25
     fbc:	69 f4       	brne	.+26     	; 0xfd8 <LCD_Char_space4+0x26>
	{
		LCD_Data_Port=' ';
     fbe:	80 e2       	ldi	r24, 0x20	; 32
     fc0:	88 bb       	out	0x18, r24	; 24
		LCD_Command_Port |= (1<<RS);	/* RS=1 Data reg. */
     fc2:	a8 9a       	sbi	0x15, 0	; 21
		LCD_Command_Port &= ~(1<<RW);	/* RW=0 Write operation */
     fc4:	a9 98       	cbi	0x15, 1	; 21
		LCD_Command_Port |= (1<<EN);	/* Enable pulse */
     fc6:	aa 9a       	sbi	0x15, 2	; 21
		flag1=1;
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	90 93 ef 00 	sts	0x00EF, r25	; 0x8000ef <flag1.2187+0x1>
     fd0:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <flag1.2187>
		return 0;
     fd4:	80 e0       	ldi	r24, 0x00	; 0
     fd6:	08 95       	ret
	}
	else
	{
		if(flag2==0)
     fd8:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <flag2.2188>
     fdc:	90 91 ed 00 	lds	r25, 0x00ED	; 0x8000ed <flag2.2188+0x1>
     fe0:	89 2b       	or	r24, r25
     fe2:	d9 f4       	brne	.+54     	; 0x101a <LCD_Char_space4+0x68>
		{
			if(count1<1)
     fe4:	80 91 ea 00 	lds	r24, 0x00EA	; 0x8000ea <count1.2189>
     fe8:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <count1.2189+0x1>
     fec:	89 2b       	or	r24, r25
     fee:	41 f4       	brne	.+16     	; 0x1000 <LCD_Char_space4+0x4e>
			{
				count1++;
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <count1.2189+0x1>
     ff8:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <count1.2189>
				return 0;
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	08 95       	ret
			}
			else
			{
				LCD_Command_Port &= ~(1<<EN);
    1000:	aa 98       	cbi	0x15, 2	; 21
				flag2=1;
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <flag2.2188+0x1>
    100a:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <flag2.2188>
				count1=0;
    100e:	10 92 eb 00 	sts	0x00EB, r1	; 0x8000eb <count1.2189+0x1>
    1012:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <count1.2189>
				return 0;
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	08 95       	ret
			}
		}
		else
		{
			if(LCD_Char_space5()==1)
    101a:	85 df       	rcall	.-246    	; 0xf26 <LCD_Char_space5>
    101c:	81 30       	cpi	r24, 0x01	; 1
    101e:	69 f4       	brne	.+26     	; 0x103a <LCD_Char_space4+0x88>
			{
				count1=0;
    1020:	10 92 eb 00 	sts	0x00EB, r1	; 0x8000eb <count1.2189+0x1>
    1024:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <count1.2189>
				flag1=0;
    1028:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <flag1.2187+0x1>
    102c:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <flag1.2187>
				flag2=0;
    1030:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <flag2.2188+0x1>
    1034:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <flag2.2188>
				return 1;
    1038:	08 95       	ret
			}
			else
			{
				return 0;
    103a:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}
}
    103c:	08 95       	ret

0000103e <LCD_Char_space3>:
	}
}
unsigned char LCD_Char_space3(void)
{
	static unsigned short flag1=0,flag2=0,count1=0;
	if(flag1==0)
    103e:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <flag1.2181>
    1042:	90 91 f5 00 	lds	r25, 0x00F5	; 0x8000f5 <flag1.2181+0x1>
    1046:	89 2b       	or	r24, r25
    1048:	69 f4       	brne	.+26     	; 0x1064 <LCD_Char_space3+0x26>
	{
		LCD_Data_Port=' ';
    104a:	80 e2       	ldi	r24, 0x20	; 32
    104c:	88 bb       	out	0x18, r24	; 24
		LCD_Command_Port |= (1<<RS);	/* RS=1 Data reg. */
    104e:	a8 9a       	sbi	0x15, 0	; 21
		LCD_Command_Port &= ~(1<<RW);	/* RW=0 Write operation */
    1050:	a9 98       	cbi	0x15, 1	; 21
		LCD_Command_Port |= (1<<EN);	/* Enable pulse */
    1052:	aa 9a       	sbi	0x15, 2	; 21
		flag1=1;
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	90 93 f5 00 	sts	0x00F5, r25	; 0x8000f5 <flag1.2181+0x1>
    105c:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <flag1.2181>
		return 0;
    1060:	80 e0       	ldi	r24, 0x00	; 0
    1062:	08 95       	ret
	}
	else
	{
		if(flag2==0)
    1064:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <flag2.2182>
    1068:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <flag2.2182+0x1>
    106c:	89 2b       	or	r24, r25
    106e:	d9 f4       	brne	.+54     	; 0x10a6 <LCD_Char_space3+0x68>
		{
			if(count1<1)
    1070:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <count1.2183>
    1074:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <count1.2183+0x1>
    1078:	89 2b       	or	r24, r25
    107a:	41 f4       	brne	.+16     	; 0x108c <LCD_Char_space3+0x4e>
			{
				count1++;
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <count1.2183+0x1>
    1084:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <count1.2183>
				return 0;
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	08 95       	ret
			}
			else
			{
				LCD_Command_Port &= ~(1<<EN);
    108c:	aa 98       	cbi	0x15, 2	; 21
				flag2=1;
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	90 93 f3 00 	sts	0x00F3, r25	; 0x8000f3 <flag2.2182+0x1>
    1096:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <flag2.2182>
				count1=0;
    109a:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <count1.2183+0x1>
    109e:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <count1.2183>
				return 0;
    10a2:	80 e0       	ldi	r24, 0x00	; 0
    10a4:	08 95       	ret
			}
		}
		else
		{
			if(LCD_Char_space4()==1)
    10a6:	85 df       	rcall	.-246    	; 0xfb2 <LCD_Char_space4>
    10a8:	81 30       	cpi	r24, 0x01	; 1
    10aa:	69 f4       	brne	.+26     	; 0x10c6 <LCD_Char_space3+0x88>
			{
				count1=0;
    10ac:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <count1.2183+0x1>
    10b0:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <count1.2183>
				flag1=0;
    10b4:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <flag1.2181+0x1>
    10b8:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <flag1.2181>
				flag2=0;
    10bc:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <flag2.2182+0x1>
    10c0:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <flag2.2182>
				return 1;
    10c4:	08 95       	ret
			}
			else
			{
				return 0;
    10c6:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}
}
    10c8:	08 95       	ret

000010ca <LCD_Char_space2>:
	}
}
unsigned char LCD_Char_space2(void)
{
	static unsigned short flag1=0,flag2=0,count1=0;
	if(flag1==0)
    10ca:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <flag1.2175>
    10ce:	90 91 fb 00 	lds	r25, 0x00FB	; 0x8000fb <flag1.2175+0x1>
    10d2:	89 2b       	or	r24, r25
    10d4:	69 f4       	brne	.+26     	; 0x10f0 <LCD_Char_space2+0x26>
	{
		LCD_Data_Port=' ';
    10d6:	80 e2       	ldi	r24, 0x20	; 32
    10d8:	88 bb       	out	0x18, r24	; 24
		LCD_Command_Port |= (1<<RS);	/* RS=1 Data reg. */
    10da:	a8 9a       	sbi	0x15, 0	; 21
		LCD_Command_Port &= ~(1<<RW);	/* RW=0 Write operation */
    10dc:	a9 98       	cbi	0x15, 1	; 21
		LCD_Command_Port |= (1<<EN);	/* Enable pulse */
    10de:	aa 9a       	sbi	0x15, 2	; 21
		flag1=1;
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	90 93 fb 00 	sts	0x00FB, r25	; 0x8000fb <flag1.2175+0x1>
    10e8:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <flag1.2175>
		return 0;
    10ec:	80 e0       	ldi	r24, 0x00	; 0
    10ee:	08 95       	ret
	}
	else
	{
		if(flag2==0)
    10f0:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <flag2.2176>
    10f4:	90 91 f9 00 	lds	r25, 0x00F9	; 0x8000f9 <flag2.2176+0x1>
    10f8:	89 2b       	or	r24, r25
    10fa:	d9 f4       	brne	.+54     	; 0x1132 <LCD_Char_space2+0x68>
		{
			if(count1<1)
    10fc:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <count1.2177>
    1100:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <count1.2177+0x1>
    1104:	89 2b       	or	r24, r25
    1106:	41 f4       	brne	.+16     	; 0x1118 <LCD_Char_space2+0x4e>
			{
				count1++;
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	90 93 f7 00 	sts	0x00F7, r25	; 0x8000f7 <count1.2177+0x1>
    1110:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <count1.2177>
				return 0;
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	08 95       	ret
			}
			else
			{
				LCD_Command_Port &= ~(1<<EN);
    1118:	aa 98       	cbi	0x15, 2	; 21
				flag2=1;
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	90 93 f9 00 	sts	0x00F9, r25	; 0x8000f9 <flag2.2176+0x1>
    1122:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <flag2.2176>
				count1=0;
    1126:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <count1.2177+0x1>
    112a:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <count1.2177>
				return 0;
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	08 95       	ret
			}
		}
		else
		{
			if(LCD_Char_space3()==1)
    1132:	85 df       	rcall	.-246    	; 0x103e <LCD_Char_space3>
    1134:	81 30       	cpi	r24, 0x01	; 1
    1136:	69 f4       	brne	.+26     	; 0x1152 <LCD_Char_space2+0x88>
			{
				count1=0;
    1138:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <count1.2177+0x1>
    113c:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <count1.2177>
				flag1=0;
    1140:	10 92 fb 00 	sts	0x00FB, r1	; 0x8000fb <flag1.2175+0x1>
    1144:	10 92 fa 00 	sts	0x00FA, r1	; 0x8000fa <flag1.2175>
				flag2=0;
    1148:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <flag2.2176+0x1>
    114c:	10 92 f8 00 	sts	0x00F8, r1	; 0x8000f8 <flag2.2176>
				return 1;
    1150:	08 95       	ret
			}
			else
			{
				return 0;
    1152:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}
}
    1154:	08 95       	ret

00001156 <LCD_Char_space1>:
#include <header.h>

unsigned char LCD_Char_space1(void)
{
	static unsigned short flag1=0,flag2=0,count1=0;
	if(flag1==0)
    1156:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <flag1.2169>
    115a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <flag1.2169+0x1>
    115e:	89 2b       	or	r24, r25
    1160:	69 f4       	brne	.+26     	; 0x117c <LCD_Char_space1+0x26>
	{
		LCD_Data_Port=' ';
    1162:	80 e2       	ldi	r24, 0x20	; 32
    1164:	88 bb       	out	0x18, r24	; 24
		LCD_Command_Port |= (1<<RS);	/* RS=1 Data reg. */
    1166:	a8 9a       	sbi	0x15, 0	; 21
		LCD_Command_Port &= ~(1<<RW);	/* RW=0 Write operation */
    1168:	a9 98       	cbi	0x15, 1	; 21
		LCD_Command_Port |= (1<<EN);	/* Enable pulse */
    116a:	aa 9a       	sbi	0x15, 2	; 21
		flag1=1;
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <flag1.2169+0x1>
    1174:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <flag1.2169>
		return 0;
    1178:	80 e0       	ldi	r24, 0x00	; 0
    117a:	08 95       	ret
	}
	else
	{
		if(flag2==0)
    117c:	80 91 fe 00 	lds	r24, 0x00FE	; 0x8000fe <flag2.2170>
    1180:	90 91 ff 00 	lds	r25, 0x00FF	; 0x8000ff <flag2.2170+0x1>
    1184:	89 2b       	or	r24, r25
    1186:	d9 f4       	brne	.+54     	; 0x11be <LCD_Char_space1+0x68>
		{
			if(count1<1)
    1188:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <count1.2171>
    118c:	90 91 fd 00 	lds	r25, 0x00FD	; 0x8000fd <count1.2171+0x1>
    1190:	89 2b       	or	r24, r25
    1192:	41 f4       	brne	.+16     	; 0x11a4 <LCD_Char_space1+0x4e>
			{
				count1++;
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	90 93 fd 00 	sts	0x00FD, r25	; 0x8000fd <count1.2171+0x1>
    119c:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <count1.2171>
				return 0;
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	08 95       	ret
			}
			else
			{
				LCD_Command_Port &= ~(1<<EN);
    11a4:	aa 98       	cbi	0x15, 2	; 21
				flag2=1;
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	90 93 ff 00 	sts	0x00FF, r25	; 0x8000ff <flag2.2170+0x1>
    11ae:	80 93 fe 00 	sts	0x00FE, r24	; 0x8000fe <flag2.2170>
				count1=0;
    11b2:	10 92 fd 00 	sts	0x00FD, r1	; 0x8000fd <count1.2171+0x1>
    11b6:	10 92 fc 00 	sts	0x00FC, r1	; 0x8000fc <count1.2171>
				return 0;
    11ba:	80 e0       	ldi	r24, 0x00	; 0
    11bc:	08 95       	ret
			}
		}
		else
		{
			if(LCD_Char_space2()==1)
    11be:	85 df       	rcall	.-246    	; 0x10ca <LCD_Char_space2>
    11c0:	81 30       	cpi	r24, 0x01	; 1
    11c2:	69 f4       	brne	.+26     	; 0x11de <LCD_Char_space1+0x88>
			{
				count1=0;
    11c4:	10 92 fd 00 	sts	0x00FD, r1	; 0x8000fd <count1.2171+0x1>
    11c8:	10 92 fc 00 	sts	0x00FC, r1	; 0x8000fc <count1.2171>
				flag1=0;
    11cc:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <flag1.2169+0x1>
    11d0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <flag1.2169>
				flag2=0;
    11d4:	10 92 ff 00 	sts	0x00FF, r1	; 0x8000ff <flag2.2170+0x1>
    11d8:	10 92 fe 00 	sts	0x00FE, r1	; 0x8000fe <flag2.2170>
				return 1;
    11dc:	08 95       	ret
			}
			else
			{
				return 0;
    11de:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}
}
    11e0:	08 95       	ret

000011e2 <LCD_Char_str3>:
	}
}
unsigned char LCD_Char_str3(void)
{
	static unsigned short flag1=0,flag2=0,count1=0;
	if(flag1==0)
    11e2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <flag1.2187>
    11e6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <flag1.2187+0x1>
    11ea:	89 2b       	or	r24, r25
    11ec:	71 f4       	brne	.+28     	; 0x120a <LCD_Char_str3+0x28>
	{
		LCD_Data_Port=str_measured_value[3];
    11ee:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <str_measured_value+0x3>
    11f2:	88 bb       	out	0x18, r24	; 24
		LCD_Command_Port |= (1<<RS);	/* RS=1 Data reg. */
    11f4:	a8 9a       	sbi	0x15, 0	; 21
		LCD_Command_Port &= ~(1<<RW);	/* RW=0 Write operation */
    11f6:	a9 98       	cbi	0x15, 1	; 21
		LCD_Command_Port |= (1<<EN);	/* Enable pulse */
    11f8:	aa 9a       	sbi	0x15, 2	; 21
		flag1=1;
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <flag1.2187+0x1>
    1202:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <flag1.2187>
		return 0;
    1206:	80 e0       	ldi	r24, 0x00	; 0
    1208:	08 95       	ret
	}
	else
	{
		if(flag2==0)
    120a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <flag2.2188>
    120e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <flag2.2188+0x1>
    1212:	89 2b       	or	r24, r25
    1214:	d9 f4       	brne	.+54     	; 0x124c <LCD_Char_str3+0x6a>
		{
			if(count1<1)
    1216:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count1.2189>
    121a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count1.2189+0x1>
    121e:	89 2b       	or	r24, r25
    1220:	41 f4       	brne	.+16     	; 0x1232 <LCD_Char_str3+0x50>
			{
				count1++;
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <count1.2189+0x1>
    122a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <count1.2189>
				return 0;
    122e:	80 e0       	ldi	r24, 0x00	; 0
    1230:	08 95       	ret
			}
			else
			{
				LCD_Command_Port &= ~(1<<EN);
    1232:	aa 98       	cbi	0x15, 2	; 21
				flag2=1;
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <flag2.2188+0x1>
    123c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <flag2.2188>
				count1=0;
    1240:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <count1.2189+0x1>
    1244:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <count1.2189>
				return 0;
    1248:	80 e0       	ldi	r24, 0x00	; 0
    124a:	08 95       	ret
			}
		}
		else
		{
			if(display_T==1)
    124c:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <display_T>
    1250:	81 30       	cpi	r24, 0x01	; 1
    1252:	81 f4       	brne	.+32     	; 0x1274 <LCD_Char_str3+0x92>
			{
				if(LCD_Char_m()==1)
    1254:	aa d2       	rcall	.+1364   	; 0x17aa <LCD_Char_m>
    1256:	81 30       	cpi	r24, 0x01	; 1
    1258:	e9 f4       	brne	.+58     	; 0x1294 <LCD_Char_str3+0xb2>
				{
					count1=0;
    125a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <count1.2189+0x1>
    125e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <count1.2189>
					flag1=0;
    1262:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <flag1.2187+0x1>
    1266:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <flag1.2187>
					flag2=0;
    126a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <flag2.2188+0x1>
    126e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <flag2.2188>
					return 0;
				}
			}
			else
			{
				if(LCD_Char_percent()==1)
    1272:	08 95       	ret
    1274:	14 db       	rcall	.-2520   	; 0x89e <LCD_Char_percent>
    1276:	81 30       	cpi	r24, 0x01	; 1
    1278:	79 f4       	brne	.+30     	; 0x1298 <LCD_Char_str3+0xb6>
				{
					count1=0;
    127a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <count1.2189+0x1>
    127e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <count1.2189>
					flag1=0;
    1282:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <flag1.2187+0x1>
    1286:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <flag1.2187>
					flag2=0;
    128a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <flag2.2188+0x1>
    128e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <flag2.2188>
					return 1;
    1292:	08 95       	ret
					flag2=0;
					return 1;
				}
				else
				{
					return 0;
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	08 95       	ret
					flag2=0;
					return 1;
				}
				else
				{
					return 0;
    1298:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
		}
	}
}
    129a:	08 95       	ret

0000129c <LCD_Char_str2>:
	}
}
unsigned char LCD_Char_str2(void)
{
	static unsigned short flag1=0,flag2=0,count1=0;
	if(flag1==0)
    129c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <flag1.2181>
    12a0:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <flag1.2181+0x1>
    12a4:	89 2b       	or	r24, r25
    12a6:	71 f4       	brne	.+28     	; 0x12c4 <LCD_Char_str2+0x28>
	{
		LCD_Data_Port=str_measured_value[2];
    12a8:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <str_measured_value+0x2>
    12ac:	88 bb       	out	0x18, r24	; 24
		LCD_Command_Port |= (1<<RS);	/* RS=1 Data reg. */
    12ae:	a8 9a       	sbi	0x15, 0	; 21
		LCD_Command_Port &= ~(1<<RW);	/* RW=0 Write operation */
    12b0:	a9 98       	cbi	0x15, 1	; 21
		LCD_Command_Port |= (1<<EN);	/* Enable pulse */
    12b2:	aa 9a       	sbi	0x15, 2	; 21
		flag1=1;
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <flag1.2181+0x1>
    12bc:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <flag1.2181>
		return 0;
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	08 95       	ret
	}
	else
	{
		if(flag2==0)
    12c4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <flag2.2182>
    12c8:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <flag2.2182+0x1>
    12cc:	89 2b       	or	r24, r25
    12ce:	d9 f4       	brne	.+54     	; 0x1306 <LCD_Char_str2+0x6a>
		{
			if(count1<1)
    12d0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <count1.2183>
    12d4:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <count1.2183+0x1>
    12d8:	89 2b       	or	r24, r25
    12da:	41 f4       	brne	.+16     	; 0x12ec <LCD_Char_str2+0x50>
			{
				count1++;
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <count1.2183+0x1>
    12e4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <count1.2183>
				return 0;
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	08 95       	ret
			}
			else
			{
				LCD_Command_Port &= ~(1<<EN);
    12ec:	aa 98       	cbi	0x15, 2	; 21
				flag2=1;
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <flag2.2182+0x1>
    12f6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <flag2.2182>
				count1=0;
    12fa:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <count1.2183+0x1>
    12fe:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <count1.2183>
				return 0;
    1302:	80 e0       	ldi	r24, 0x00	; 0
    1304:	08 95       	ret
			}
		}
		else
		{
			
			if(str_measured_value[3]!='\0')
    1306:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <str_measured_value+0x3>
    130a:	88 23       	and	r24, r24
    130c:	81 f0       	breq	.+32     	; 0x132e <LCD_Char_str2+0x92>
			{
				if(LCD_Char_str3()==1)
    130e:	69 df       	rcall	.-302    	; 0x11e2 <LCD_Char_str3>
    1310:	81 30       	cpi	r24, 0x01	; 1
    1312:	89 f5       	brne	.+98     	; 0x1376 <LCD_Char_str2+0xda>
				{
					count1=0;
    1314:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <count1.2183+0x1>
    1318:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <count1.2183>
					flag1=0;
    131c:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <flag1.2181+0x1>
    1320:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <flag1.2181>
					flag2=0;
    1324:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <flag2.2182+0x1>
    1328:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <flag2.2182>
					return 1;
    132c:	08 95       	ret
					return 0;
				}
			}
			else
			{
				if(display_T==1)
    132e:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <display_T>
    1332:	81 30       	cpi	r24, 0x01	; 1
				{
					if(LCD_Char_m()==1)
    1334:	81 f4       	brne	.+32     	; 0x1356 <LCD_Char_str2+0xba>
    1336:	39 d2       	rcall	.+1138   	; 0x17aa <LCD_Char_m>
    1338:	81 30       	cpi	r24, 0x01	; 1
    133a:	f9 f4       	brne	.+62     	; 0x137a <LCD_Char_str2+0xde>
					{
						count1=0;
    133c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <count1.2183+0x1>
    1340:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <count1.2183>
						flag1=0;
    1344:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <flag1.2181+0x1>
    1348:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <flag1.2181>
						flag2=0;
    134c:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <flag2.2182+0x1>
    1350:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <flag2.2182>
						return 0;
					}
				}
				else
				{
					if(LCD_Char_percent()==1)
    1354:	08 95       	ret
    1356:	a3 da       	rcall	.-2746   	; 0x89e <LCD_Char_percent>
    1358:	81 30       	cpi	r24, 0x01	; 1
    135a:	89 f4       	brne	.+34     	; 0x137e <LCD_Char_str2+0xe2>
					{
						count1=0;
    135c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <count1.2183+0x1>
    1360:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <count1.2183>
						flag1=0;
    1364:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <flag1.2181+0x1>
    1368:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <flag1.2181>
						flag2=0;
    136c:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <flag2.2182+0x1>
    1370:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <flag2.2182>
						return 1;
    1374:	08 95       	ret
					flag2=0;
					return 1;
				}
				else
				{
					return 0;
    1376:	80 e0       	ldi	r24, 0x00	; 0
    1378:	08 95       	ret
						flag2=0;
						return 1;
					}
					else
					{
						return 0;
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	08 95       	ret
						flag2=0;
						return 1;
					}
					else
					{
						return 0;
    137e:	80 e0       	ldi	r24, 0x00	; 0
					}
				}
			}
		}
	}
}
    1380:	08 95       	ret

00001382 <LCD_Char_str1>:
	}
}
unsigned char LCD_Char_str1(void)
{
	static unsigned short flag1=0,flag2=0,count1=0;
	if(flag1==0)
    1382:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <flag1.2175>
    1386:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <flag1.2175+0x1>
    138a:	89 2b       	or	r24, r25
    138c:	71 f4       	brne	.+28     	; 0x13aa <LCD_Char_str1+0x28>
	{
		LCD_Data_Port=str_measured_value[1];
    138e:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <str_measured_value+0x1>
    1392:	88 bb       	out	0x18, r24	; 24
		LCD_Command_Port |= (1<<RS);	/* RS=1 Data reg. */
    1394:	a8 9a       	sbi	0x15, 0	; 21
		LCD_Command_Port &= ~(1<<RW);	/* RW=0 Write operation */
    1396:	a9 98       	cbi	0x15, 1	; 21
		LCD_Command_Port |= (1<<EN);	/* Enable pulse */
    1398:	aa 9a       	sbi	0x15, 2	; 21
		flag1=1;
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <flag1.2175+0x1>
    13a2:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <flag1.2175>
		return 0;
    13a6:	80 e0       	ldi	r24, 0x00	; 0
    13a8:	08 95       	ret
	}
	else
	{
		if(flag2==0)
    13aa:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <flag2.2176>
    13ae:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <flag2.2176+0x1>
    13b2:	89 2b       	or	r24, r25
    13b4:	d9 f4       	brne	.+54     	; 0x13ec <LCD_Char_str1+0x6a>
		{
			if(count1<1)
    13b6:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <count1.2177>
    13ba:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <count1.2177+0x1>
    13be:	89 2b       	or	r24, r25
    13c0:	41 f4       	brne	.+16     	; 0x13d2 <LCD_Char_str1+0x50>
			{
				count1++;
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <count1.2177+0x1>
    13ca:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <count1.2177>
				return 0;
    13ce:	80 e0       	ldi	r24, 0x00	; 0
    13d0:	08 95       	ret
			}
			else
			{
				LCD_Command_Port &= ~(1<<EN);
    13d2:	aa 98       	cbi	0x15, 2	; 21
				flag2=1;
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <flag2.2176+0x1>
    13dc:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <flag2.2176>
				count1=0;
    13e0:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <count1.2177+0x1>
    13e4:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <count1.2177>
				return 0;
    13e8:	80 e0       	ldi	r24, 0x00	; 0
    13ea:	08 95       	ret
			}
		}
		else
		{
			
			if(str_measured_value[2]!='\0')
    13ec:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <str_measured_value+0x2>
    13f0:	88 23       	and	r24, r24
    13f2:	81 f0       	breq	.+32     	; 0x1414 <LCD_Char_str1+0x92>
			{
				if(LCD_Char_str2()==1)
    13f4:	53 df       	rcall	.-346    	; 0x129c <LCD_Char_str2>
    13f6:	81 30       	cpi	r24, 0x01	; 1
    13f8:	89 f5       	brne	.+98     	; 0x145c <LCD_Char_str1+0xda>
				{
					count1=0;
    13fa:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <count1.2177+0x1>
    13fe:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <count1.2177>
					flag1=0;
    1402:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <flag1.2175+0x1>
    1406:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <flag1.2175>
					flag2=0;
    140a:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <flag2.2176+0x1>
    140e:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <flag2.2176>
					return 1;
    1412:	08 95       	ret
					return 0;
				}
			}
			else
			{
				if(display_T==1)
    1414:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <display_T>
    1418:	81 30       	cpi	r24, 0x01	; 1
				{
					if(LCD_Char_m()==1)
    141a:	81 f4       	brne	.+32     	; 0x143c <LCD_Char_str1+0xba>
    141c:	c6 d1       	rcall	.+908    	; 0x17aa <LCD_Char_m>
    141e:	81 30       	cpi	r24, 0x01	; 1
    1420:	f9 f4       	brne	.+62     	; 0x1460 <LCD_Char_str1+0xde>
					{
						count1=0;
    1422:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <count1.2177+0x1>
    1426:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <count1.2177>
						flag1=0;
    142a:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <flag1.2175+0x1>
    142e:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <flag1.2175>
						flag2=0;
    1432:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <flag2.2176+0x1>
    1436:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <flag2.2176>
						return 0;
					}
				}
				else
				{
					if(LCD_Char_percent()==1)
    143a:	08 95       	ret
    143c:	30 da       	rcall	.-2976   	; 0x89e <LCD_Char_percent>
    143e:	81 30       	cpi	r24, 0x01	; 1
    1440:	89 f4       	brne	.+34     	; 0x1464 <LCD_Char_str1+0xe2>
					{
						count1=0;
    1442:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <count1.2177+0x1>
    1446:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <count1.2177>
						flag1=0;
    144a:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <flag1.2175+0x1>
    144e:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <flag1.2175>
						flag2=0;
    1452:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <flag2.2176+0x1>
    1456:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <flag2.2176>
						return 1;
    145a:	08 95       	ret
					flag2=0;
					return 1;
				}
				else
				{
					return 0;
    145c:	80 e0       	ldi	r24, 0x00	; 0
    145e:	08 95       	ret
						flag2=0;
						return 1;
					}
					else
					{
						return 0;
    1460:	80 e0       	ldi	r24, 0x00	; 0
    1462:	08 95       	ret
						flag2=0;
						return 1;
					}
					else
					{
						return 0;
    1464:	80 e0       	ldi	r24, 0x00	; 0
					}
				}
			}
		}
	}
}
    1466:	08 95       	ret

00001468 <LCD_Char_str0>:
#include<header.h>

unsigned char LCD_Char_str0(void)
{
	static unsigned short flag1=0,flag2=0,count1=0;
	if(flag1==0)
    1468:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <flag1.2169>
    146c:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <flag1.2169+0x1>
    1470:	89 2b       	or	r24, r25
    1472:	71 f4       	brne	.+28     	; 0x1490 <LCD_Char_str0+0x28>
	{
		LCD_Data_Port=str_measured_value[0];
    1474:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <str_measured_value>
    1478:	88 bb       	out	0x18, r24	; 24
		LCD_Command_Port |= (1<<RS);	/* RS=1 Data reg. */
    147a:	a8 9a       	sbi	0x15, 0	; 21
		LCD_Command_Port &= ~(1<<RW);	/* RW=0 Write operation */
    147c:	a9 98       	cbi	0x15, 1	; 21
		LCD_Command_Port |= (1<<EN);	/* Enable pulse */
    147e:	aa 9a       	sbi	0x15, 2	; 21
		flag1=1;
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <flag1.2169+0x1>
    1488:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <flag1.2169>
		return 0;
    148c:	80 e0       	ldi	r24, 0x00	; 0
    148e:	08 95       	ret
	}
	else
	{
		if(flag2==0)
    1490:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <flag2.2170>
    1494:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <flag2.2170+0x1>
    1498:	89 2b       	or	r24, r25
    149a:	d9 f4       	brne	.+54     	; 0x14d2 <LCD_Char_str0+0x6a>
		{
			if(count1<1)
    149c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <count1.2171>
    14a0:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <count1.2171+0x1>
    14a4:	89 2b       	or	r24, r25
    14a6:	41 f4       	brne	.+16     	; 0x14b8 <LCD_Char_str0+0x50>
			{
				count1++;
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <count1.2171+0x1>
    14b0:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <count1.2171>
				return 0;
    14b4:	80 e0       	ldi	r24, 0x00	; 0
    14b6:	08 95       	ret
			}
			else
			{
				LCD_Command_Port &= ~(1<<EN);
    14b8:	aa 98       	cbi	0x15, 2	; 21
				flag2=1;
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <flag2.2170+0x1>
    14c2:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <flag2.2170>
				count1=0;
    14c6:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <count1.2171+0x1>
    14ca:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <count1.2171>
				return 0;
    14ce:	80 e0       	ldi	r24, 0x00	; 0
    14d0:	08 95       	ret
			}
		}
		else
		{
			if(str_measured_value[1]!='\0')
    14d2:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <str_measured_value+0x1>
    14d6:	88 23       	and	r24, r24
    14d8:	81 f0       	breq	.+32     	; 0x14fa <LCD_Char_str0+0x92>
			{
				if(LCD_Char_str1()==1)
    14da:	53 df       	rcall	.-346    	; 0x1382 <LCD_Char_str1>
    14dc:	81 30       	cpi	r24, 0x01	; 1
    14de:	89 f5       	brne	.+98     	; 0x1542 <LCD_Char_str0+0xda>
				{
					count1=0;
    14e0:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <count1.2171+0x1>
    14e4:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <count1.2171>
					flag1=0;
    14e8:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <flag1.2169+0x1>
    14ec:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <flag1.2169>
					flag2=0;
    14f0:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <flag2.2170+0x1>
    14f4:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <flag2.2170>
					return 1;
    14f8:	08 95       	ret
					return 0;
				}
			}
			else
			{
				if(display_T==1)
    14fa:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <display_T>
    14fe:	81 30       	cpi	r24, 0x01	; 1
				{
					if(LCD_Char_m()==1)
    1500:	81 f4       	brne	.+32     	; 0x1522 <LCD_Char_str0+0xba>
    1502:	53 d1       	rcall	.+678    	; 0x17aa <LCD_Char_m>
    1504:	81 30       	cpi	r24, 0x01	; 1
    1506:	f9 f4       	brne	.+62     	; 0x1546 <LCD_Char_str0+0xde>
					{
						count1=0;
    1508:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <count1.2171+0x1>
    150c:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <count1.2171>
						flag1=0;
    1510:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <flag1.2169+0x1>
    1514:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <flag1.2169>
						flag2=0;
    1518:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <flag2.2170+0x1>
    151c:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <flag2.2170>
						return 0;
					}
				}
				else
				{
					if(LCD_Char_percent()==1)
    1520:	08 95       	ret
    1522:	bd d9       	rcall	.-3206   	; 0x89e <LCD_Char_percent>
    1524:	81 30       	cpi	r24, 0x01	; 1
    1526:	89 f4       	brne	.+34     	; 0x154a <LCD_Char_str0+0xe2>
					{
						count1=0;
    1528:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <count1.2171+0x1>
    152c:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <count1.2171>
						flag1=0;
    1530:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <flag1.2169+0x1>
    1534:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <flag1.2169>
						flag2=0;
    1538:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <flag2.2170+0x1>
    153c:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <flag2.2170>
						return 1;
    1540:	08 95       	ret
					flag2=0;
					return 1;
				}
				else
				{
					return 0;
    1542:	80 e0       	ldi	r24, 0x00	; 0
    1544:	08 95       	ret
						flag2=0;
						return 1;
					}
					else
					{
						return 0;
    1546:	80 e0       	ldi	r24, 0x00	; 0
    1548:	08 95       	ret
						flag2=0;
						return 1;
					}
					else
					{
						return 0;
    154a:	80 e0       	ldi	r24, 0x00	; 0
					}
				}
			}
		}
	}
}
    154c:	08 95       	ret

0000154e <LCD_Char_ddot>:
	}
}
unsigned char LCD_Char_ddot(void)
{
	static unsigned short flag1=0,flag2=0,count1=0;
	if(flag1==0)
    154e:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <flag1.2181>
    1552:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <flag1.2181+0x1>
    1556:	89 2b       	or	r24, r25
    1558:	69 f4       	brne	.+26     	; 0x1574 <LCD_Char_ddot+0x26>
	{
		LCD_Data_Port=':';
    155a:	8a e3       	ldi	r24, 0x3A	; 58
    155c:	88 bb       	out	0x18, r24	; 24
		LCD_Command_Port |= (1<<RS);	/* RS=1 Data reg. */
    155e:	a8 9a       	sbi	0x15, 0	; 21
		LCD_Command_Port &= ~(1<<RW);	/* RW=0 Write operation */
    1560:	a9 98       	cbi	0x15, 1	; 21
		LCD_Command_Port |= (1<<EN);	/* Enable pulse */
    1562:	aa 9a       	sbi	0x15, 2	; 21
		flag1=1;
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <flag1.2181+0x1>
    156c:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <flag1.2181>
		return 0;
    1570:	80 e0       	ldi	r24, 0x00	; 0
    1572:	08 95       	ret
	}
	else
	{
		if(flag2==0)
    1574:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <flag2.2182>
    1578:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <flag2.2182+0x1>
    157c:	89 2b       	or	r24, r25
    157e:	d9 f4       	brne	.+54     	; 0x15b6 <LCD_Char_ddot+0x68>
		{
			if(count1<1)
    1580:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <count1.2183>
    1584:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <count1.2183+0x1>
    1588:	89 2b       	or	r24, r25
    158a:	41 f4       	brne	.+16     	; 0x159c <LCD_Char_ddot+0x4e>
			{
				count1++;
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <count1.2183+0x1>
    1594:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <count1.2183>
				return 0;
    1598:	80 e0       	ldi	r24, 0x00	; 0
    159a:	08 95       	ret
			}
			else
			{
				LCD_Command_Port &= ~(1<<EN);
    159c:	aa 98       	cbi	0x15, 2	; 21
				flag2=1;
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <flag2.2182+0x1>
    15a6:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <flag2.2182>
				count1=0;
    15aa:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <count1.2183+0x1>
    15ae:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <count1.2183>
				return 0;
    15b2:	80 e0       	ldi	r24, 0x00	; 0
    15b4:	08 95       	ret
			}
		}
		else
		{
			if(str_measured_value[0]!='\0')
    15b6:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <str_measured_value>
    15ba:	88 23       	and	r24, r24
    15bc:	81 f0       	breq	.+32     	; 0x15de <LCD_Char_ddot+0x90>
			{
				if(LCD_Char_str0()==1)
    15be:	54 df       	rcall	.-344    	; 0x1468 <LCD_Char_str0>
    15c0:	81 30       	cpi	r24, 0x01	; 1
    15c2:	e9 f4       	brne	.+58     	; 0x15fe <LCD_Char_ddot+0xb0>
				{
					count1=0;
    15c4:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <count1.2183+0x1>
    15c8:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <count1.2183>
					flag1=0;
    15cc:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <flag1.2181+0x1>
    15d0:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <flag1.2181>
					flag2=0;
    15d4:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <flag2.2182+0x1>
    15d8:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <flag2.2182>
					return 0;
				}
			}
			else
			{
				if(LCD_Char_space1()==1)
    15dc:	08 95       	ret
    15de:	bb dd       	rcall	.-1162   	; 0x1156 <LCD_Char_space1>
    15e0:	81 30       	cpi	r24, 0x01	; 1
    15e2:	79 f4       	brne	.+30     	; 0x1602 <LCD_Char_ddot+0xb4>
				{
					count1=0;
    15e4:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <count1.2183+0x1>
    15e8:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <count1.2183>
					flag1=0;
    15ec:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <flag1.2181+0x1>
    15f0:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <flag1.2181>
					flag2=0;
    15f4:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <flag2.2182+0x1>
    15f8:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <flag2.2182>
					return 1;
    15fc:	08 95       	ret
					flag2=0;
					return 1;
				}
				else
				{
					return 0;
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	08 95       	ret
					flag2=0;
					return 1;
				}
				else
				{
					return 0;
    1602:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
		}
	}
}
    1604:	08 95       	ret

00001606 <LCD_Char_T>:
	}
}
unsigned char LCD_Char_T(void)
{
	static unsigned short flag1=0,flag2=0,count1=0;
	if(flag1==0)
    1606:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <flag1.2175>
    160a:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <flag1.2175+0x1>
    160e:	89 2b       	or	r24, r25
    1610:	69 f4       	brne	.+26     	; 0x162c <LCD_Char_T+0x26>
	{
		LCD_Data_Port='T';
    1612:	84 e5       	ldi	r24, 0x54	; 84
    1614:	88 bb       	out	0x18, r24	; 24
		LCD_Command_Port |= (1<<RS);	/* RS=1 Data reg. */
    1616:	a8 9a       	sbi	0x15, 0	; 21
		LCD_Command_Port &= ~(1<<RW);	/* RW=0 Write operation */
    1618:	a9 98       	cbi	0x15, 1	; 21
		LCD_Command_Port |= (1<<EN);	/* Enable pulse */
    161a:	aa 9a       	sbi	0x15, 2	; 21
		flag1=1;
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <flag1.2175+0x1>
    1624:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <flag1.2175>
		return 0;
    1628:	80 e0       	ldi	r24, 0x00	; 0
    162a:	08 95       	ret
	}
	else
	{
		if(flag2==0)
    162c:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <flag2.2176>
    1630:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <flag2.2176+0x1>
    1634:	89 2b       	or	r24, r25
    1636:	d9 f4       	brne	.+54     	; 0x166e <LCD_Char_T+0x68>
		{
			if(count1<1)
    1638:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <count1.2177>
    163c:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <count1.2177+0x1>
    1640:	89 2b       	or	r24, r25
    1642:	41 f4       	brne	.+16     	; 0x1654 <LCD_Char_T+0x4e>
			{
				count1++;
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <count1.2177+0x1>
    164c:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <count1.2177>
				return 0;
    1650:	80 e0       	ldi	r24, 0x00	; 0
    1652:	08 95       	ret
			}
			else
			{
				LCD_Command_Port &= ~(1<<EN);
    1654:	aa 98       	cbi	0x15, 2	; 21
				flag2=1;
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <flag2.2176+0x1>
    165e:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <flag2.2176>
				count1=0;
    1662:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <count1.2177+0x1>
    1666:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <count1.2177>
				return 0;
    166a:	80 e0       	ldi	r24, 0x00	; 0
    166c:	08 95       	ret
			}
		}
		else
		{
			if(LCD_Char_ddot()==1)
    166e:	6f df       	rcall	.-290    	; 0x154e <LCD_Char_ddot>
    1670:	81 30       	cpi	r24, 0x01	; 1
    1672:	69 f4       	brne	.+26     	; 0x168e <LCD_Char_T+0x88>
			{
				count1=0;
    1674:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <count1.2177+0x1>
    1678:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <count1.2177>
				flag1=0;
    167c:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <flag1.2175+0x1>
    1680:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <flag1.2175>
				flag2=0;
    1684:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <flag2.2176+0x1>
    1688:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <flag2.2176>
				return 1;
    168c:	08 95       	ret
			}
			else
			{
				return 0;
    168e:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}
}
    1690:	08 95       	ret

00001692 <LCD_Char_space_fromT>:
#include<header.h>

unsigned char LCD_Char_space_fromT(void)
{
	static unsigned short flag1=0,flag2=0,count1=0;
	if(flag1==0)
    1692:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <flag1.2169>
    1696:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <flag1.2169+0x1>
    169a:	89 2b       	or	r24, r25
    169c:	69 f4       	brne	.+26     	; 0x16b8 <LCD_Char_space_fromT+0x26>
	{
		LCD_Data_Port=' ';
    169e:	80 e2       	ldi	r24, 0x20	; 32
    16a0:	88 bb       	out	0x18, r24	; 24
		LCD_Command_Port |= (1<<RS);	/* RS=1 Data reg. */
    16a2:	a8 9a       	sbi	0x15, 0	; 21
		LCD_Command_Port &= ~(1<<RW);	/* RW=0 Write operation */
    16a4:	a9 98       	cbi	0x15, 1	; 21
		LCD_Command_Port |= (1<<EN);	/* Enable pulse */
    16a6:	aa 9a       	sbi	0x15, 2	; 21
		flag1=1;
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <flag1.2169+0x1>
    16b0:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <flag1.2169>
		return 0;
    16b4:	80 e0       	ldi	r24, 0x00	; 0
    16b6:	08 95       	ret
	}
	else
	{
		if(flag2==0)
    16b8:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <flag2.2170>
    16bc:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <flag2.2170+0x1>
    16c0:	89 2b       	or	r24, r25
    16c2:	d9 f4       	brne	.+54     	; 0x16fa <LCD_Char_space_fromT+0x68>
		{
			if(count1<1)
    16c4:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <count1.2171>
    16c8:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <count1.2171+0x1>
    16cc:	89 2b       	or	r24, r25
    16ce:	41 f4       	brne	.+16     	; 0x16e0 <LCD_Char_space_fromT+0x4e>
			{
				count1++;
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <count1.2171+0x1>
    16d8:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <count1.2171>
				return 0;
    16dc:	80 e0       	ldi	r24, 0x00	; 0
    16de:	08 95       	ret
			}
			else
			{
				LCD_Command_Port &= ~(1<<EN);
    16e0:	aa 98       	cbi	0x15, 2	; 21
				flag2=1;
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <flag2.2170+0x1>
    16ea:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <flag2.2170>
				count1=0;
    16ee:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <count1.2171+0x1>
    16f2:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <count1.2171>
				return 0;
    16f6:	80 e0       	ldi	r24, 0x00	; 0
    16f8:	08 95       	ret
			}
		}
		else
		{
			if(LCD_Char_T()==1)
    16fa:	85 df       	rcall	.-246    	; 0x1606 <LCD_Char_T>
    16fc:	81 30       	cpi	r24, 0x01	; 1
    16fe:	69 f4       	brne	.+26     	; 0x171a <LCD_Char_space_fromT+0x88>
			{
				count1=0;
    1700:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <count1.2171+0x1>
    1704:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <count1.2171>
				flag1=0;
    1708:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <flag1.2169+0x1>
    170c:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <flag1.2169>
				flag2=0;
    1710:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <flag2.2170+0x1>
    1714:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <flag2.2170>
				return 1;
    1718:	08 95       	ret
			}
			else
			{
				return 0;
    171a:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}
}
    171c:	08 95       	ret

0000171e <LCD_Char_s>:
	}
}
unsigned char LCD_Char_s(void)
{
	static unsigned short flag1=0,flag2=0,count1=0;
	if(flag1==0)
    171e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <flag1.2193>
    1722:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <flag1.2193+0x1>
    1726:	89 2b       	or	r24, r25
    1728:	69 f4       	brne	.+26     	; 0x1744 <LCD_Char_s+0x26>
	{
		LCD_Data_Port='s';
    172a:	83 e7       	ldi	r24, 0x73	; 115
    172c:	88 bb       	out	0x18, r24	; 24
		LCD_Command_Port |= (1<<RS);	/* RS=1 Data reg. */
    172e:	a8 9a       	sbi	0x15, 0	; 21
		LCD_Command_Port &= ~(1<<RW);	/* RW=0 Write operation */
    1730:	a9 98       	cbi	0x15, 1	; 21
		LCD_Command_Port |= (1<<EN);	/* Enable pulse */
    1732:	aa 9a       	sbi	0x15, 2	; 21
		flag1=1;
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <flag1.2193+0x1>
    173c:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <flag1.2193>
		return 0;
    1740:	80 e0       	ldi	r24, 0x00	; 0
    1742:	08 95       	ret
	}
	else
	{
		if(flag2==0)
    1744:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <flag2.2194>
    1748:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <flag2.2194+0x1>
    174c:	89 2b       	or	r24, r25
    174e:	d9 f4       	brne	.+54     	; 0x1786 <LCD_Char_s+0x68>
		{
			if(count1<1)
    1750:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <count1.2195>
    1754:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <count1.2195+0x1>
    1758:	89 2b       	or	r24, r25
    175a:	41 f4       	brne	.+16     	; 0x176c <LCD_Char_s+0x4e>
			{
				count1++;
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <count1.2195+0x1>
    1764:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <count1.2195>
				return 0;
    1768:	80 e0       	ldi	r24, 0x00	; 0
    176a:	08 95       	ret
			}
			else
			{
				LCD_Command_Port &= ~(1<<EN);
    176c:	aa 98       	cbi	0x15, 2	; 21
				flag2=1;
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <flag2.2194+0x1>
    1776:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <flag2.2194>
				count1=0;
    177a:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <count1.2195+0x1>
    177e:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <count1.2195>
				return 0;
    1782:	80 e0       	ldi	r24, 0x00	; 0
    1784:	08 95       	ret
			}
		}
		else
		{
			if(LCD_Char_space4()==1)
    1786:	15 dc       	rcall	.-2006   	; 0xfb2 <LCD_Char_space4>
    1788:	81 30       	cpi	r24, 0x01	; 1
    178a:	69 f4       	brne	.+26     	; 0x17a6 <LCD_Char_s+0x88>
			{
				count1=0;
    178c:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <count1.2195+0x1>
    1790:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <count1.2195>
				flag1=0;
    1794:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <flag1.2193+0x1>
    1798:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <flag1.2193>
				flag2=0;
    179c:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <flag2.2194+0x1>
    17a0:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <flag2.2194>
				return 1;
    17a4:	08 95       	ret
			}
			else
			{
				return 0;
    17a6:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}
    17a8:	08 95       	ret

000017aa <LCD_Char_m>:
	}
}
unsigned char LCD_Char_m(void)
{
	static unsigned short flag1=0,flag2=0,count1=0;
	if(flag1==0)
    17aa:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <flag1.2187>
    17ae:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <flag1.2187+0x1>
    17b2:	89 2b       	or	r24, r25
    17b4:	69 f4       	brne	.+26     	; 0x17d0 <LCD_Char_m+0x26>
	{
		LCD_Data_Port='m';
    17b6:	8d e6       	ldi	r24, 0x6D	; 109
    17b8:	88 bb       	out	0x18, r24	; 24
		LCD_Command_Port |= (1<<RS);	/* RS=1 Data reg. */
    17ba:	a8 9a       	sbi	0x15, 0	; 21
		LCD_Command_Port &= ~(1<<RW);	/* RW=0 Write operation */
    17bc:	a9 98       	cbi	0x15, 1	; 21
		LCD_Command_Port |= (1<<EN);	/* Enable pulse */
    17be:	aa 9a       	sbi	0x15, 2	; 21
		flag1=1;
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <flag1.2187+0x1>
    17c8:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <flag1.2187>
		return 0;
    17cc:	80 e0       	ldi	r24, 0x00	; 0
    17ce:	08 95       	ret
	}
	else
	{
		if(flag2==0)
    17d0:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <flag2.2188>
    17d4:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <flag2.2188+0x1>
    17d8:	89 2b       	or	r24, r25
    17da:	d9 f4       	brne	.+54     	; 0x1812 <LCD_Char_m+0x68>
		{
			if(count1<1)
    17dc:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <count1.2189>
    17e0:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <count1.2189+0x1>
    17e4:	89 2b       	or	r24, r25
    17e6:	41 f4       	brne	.+16     	; 0x17f8 <LCD_Char_m+0x4e>
			{
				count1++;
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <count1.2189+0x1>
    17f0:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <count1.2189>
				return 0;
    17f4:	80 e0       	ldi	r24, 0x00	; 0
    17f6:	08 95       	ret
			}
			else
			{
				LCD_Command_Port &= ~(1<<EN);
    17f8:	aa 98       	cbi	0x15, 2	; 21
				flag2=1;
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <flag2.2188+0x1>
    1802:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <flag2.2188>
				count1=0;
    1806:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <count1.2189+0x1>
    180a:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <count1.2189>
				return 0;
    180e:	80 e0       	ldi	r24, 0x00	; 0
    1810:	08 95       	ret
			}
		}
		else
		{
			if(LCD_Char_s()==1)
    1812:	85 df       	rcall	.-246    	; 0x171e <LCD_Char_s>
    1814:	81 30       	cpi	r24, 0x01	; 1
    1816:	69 f4       	brne	.+26     	; 0x1832 <LCD_Char_m+0x88>
			{
				count1=0;
    1818:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <count1.2189+0x1>
    181c:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <count1.2189>
				flag1=0;
    1820:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <flag1.2187+0x1>
    1824:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <flag1.2187>
				flag2=0;
    1828:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <flag2.2188+0x1>
    182c:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <flag2.2188>
				return 1;
    1830:	08 95       	ret
			}
			else
			{
				return 0;
    1832:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}
}
    1834:	08 95       	ret

00001836 <state_machine>:
#include<header.h>

void state_machine(void)
{
	switch(SELECT_BUTTONS)
    1836:	80 b3       	in	r24, 0x10	; 16
    1838:	86 95       	lsr	r24
    183a:	86 95       	lsr	r24
    183c:	8f 70       	andi	r24, 0x0F	; 15
    183e:	8b 30       	cpi	r24, 0x0B	; 11
    1840:	c1 f0       	breq	.+48     	; 0x1872 <state_machine+0x3c>
    1842:	18 f4       	brcc	.+6      	; 0x184a <state_machine+0x14>
    1844:	87 30       	cpi	r24, 0x07	; 7
    1846:	f1 f0       	breq	.+60     	; 0x1884 <state_machine+0x4e>
    1848:	08 95       	ret
    184a:	8d 30       	cpi	r24, 0x0D	; 13
    184c:	51 f0       	breq	.+20     	; 0x1862 <state_machine+0x2c>
    184e:	8e 30       	cpi	r24, 0x0E	; 14
    1850:	09 f5       	brne	.+66     	; 0x1894 <state_machine+0x5e>
	{
		case BUT0:      //only the first button
		{
			channel_position=POSITION_CHANNEL_1;
    1852:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <channel_position>
			str_measured_value[0]='\0';    //display nothing until new measurement
    1856:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <str_measured_value>
			display_T=TRUE;                //display T when changing the channel 
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <display_T>
			break;
    1860:	08 95       	ret
		}
		case BUT1:     //only the second button
		{
			channel_position=POSITION_CHANNEL_2;
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <channel_position>
			str_measured_value[0]='\0';    //display nothing until new measurement
    1868:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <str_measured_value>
			display_T=TRUE;                //display T when changing the channel
    186c:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <display_T>
			break;
    1870:	08 95       	ret
		}
		case BUT2:      //only the third button
		{
			channel_position=POSITION_CHANNEL_3;
    1872:	82 e0       	ldi	r24, 0x02	; 2
    1874:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <channel_position>
			str_measured_value[0]='\0';    //display nothing until new measurement
    1878:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <str_measured_value>
			display_T=TRUE;                //display T when changing the channel
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <display_T>
			break;
    1882:	08 95       	ret
		}
		case BUT3:       //only the fourth button
		{
			channel_position=POSITION_CHANNEL_4;
    1884:	83 e0       	ldi	r24, 0x03	; 3
    1886:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <channel_position>
			str_measured_value[0]='\0';    //display nothing until new measurement
    188a:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <str_measured_value>
			display_T=TRUE;                //display T when changing the channel
    188e:	81 e0       	ldi	r24, 0x01	; 1
    1890:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <display_T>
    1894:	08 95       	ret

00001896 <switch_T_FU>:
}
void switch_T_FU(void)
{
	static unsigned char flag_first_imp=FALSE;
	static unsigned char count_debounce=0;
	if(BUT5==BUTTON_PRESED)
    1896:	cf 99       	sbic	0x19, 7	; 25
    1898:	17 c0       	rjmp	.+46     	; 0x18c8 <switch_T_FU+0x32>
	{
		count_debounce++;
    189a:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <count_debounce.2179>
    189e:	8f 5f       	subi	r24, 0xFF	; 255
    18a0:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <count_debounce.2179>
		if(count_debounce==5)
    18a4:	85 30       	cpi	r24, 0x05	; 5
    18a6:	81 f4       	brne	.+32     	; 0x18c8 <switch_T_FU+0x32>
		{
			if(flag_first_imp==FALSE)
    18a8:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <flag_first_imp.2178>
    18ac:	81 11       	cpse	r24, r1
    18ae:	0a c0       	rjmp	.+20     	; 0x18c4 <switch_T_FU+0x2e>
			{
				display_T^=1;             //alternate between TRUE and FALSE
    18b0:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <display_T>
    18b4:	91 e0       	ldi	r25, 0x01	; 1
    18b6:	89 27       	eor	r24, r25
    18b8:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <display_T>
				str_measured_value[0]='\0';
    18bc:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <str_measured_value>
				flag_first_imp=TRUE;
    18c0:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <flag_first_imp.2178>
			}
			count_debounce=0;
    18c4:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <count_debounce.2179>
		}
	}
	if(BUT5==BUTTON_UNPRESED)
    18c8:	cf 9b       	sbis	0x19, 7	; 25
    18ca:	04 c0       	rjmp	.+8      	; 0x18d4 <switch_T_FU+0x3e>
	{
		flag_first_imp=FALSE;
    18cc:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <flag_first_imp.2178>
		count_debounce=0;
    18d0:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <count_debounce.2179>
    18d4:	08 95       	ret

000018d6 <pwm0>:
#include<header.h>

unsigned char pwm0(unsigned short up_pulses, unsigned short period) 
{
	static unsigned short count=0;
	if(count<up_pulses)
    18d6:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <count.2170>
    18da:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <count.2170+0x1>
    18de:	28 17       	cp	r18, r24
    18e0:	39 07       	cpc	r19, r25
    18e2:	40 f4       	brcc	.+16     	; 0x18f4 <pwm0+0x1e>
	{
		count++;
    18e4:	2f 5f       	subi	r18, 0xFF	; 255
    18e6:	3f 4f       	sbci	r19, 0xFF	; 255
    18e8:	30 93 3b 01 	sts	0x013B, r19	; 0x80013b <count.2170+0x1>
    18ec:	20 93 3a 01 	sts	0x013A, r18	; 0x80013a <count.2170>
		return PULSE_ON;
    18f0:	80 e0       	ldi	r24, 0x00	; 0
    18f2:	08 95       	ret
	}
	else if(count<period-1)
    18f4:	ab 01       	movw	r20, r22
    18f6:	41 50       	subi	r20, 0x01	; 1
    18f8:	51 09       	sbc	r21, r1
    18fa:	24 17       	cp	r18, r20
    18fc:	35 07       	cpc	r19, r21
    18fe:	40 f4       	brcc	.+16     	; 0x1910 <pwm0+0x3a>
	{
		count++;
    1900:	2f 5f       	subi	r18, 0xFF	; 255
    1902:	3f 4f       	sbci	r19, 0xFF	; 255
    1904:	30 93 3b 01 	sts	0x013B, r19	; 0x80013b <count.2170+0x1>
    1908:	20 93 3a 01 	sts	0x013A, r18	; 0x80013a <count.2170>
		return PULSE_OFF;
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	08 95       	ret
	}
	else
	{
		if(up_pulses>=period)
    1910:	86 17       	cp	r24, r22
    1912:	97 07       	cpc	r25, r23
    1914:	30 f0       	brcs	.+12     	; 0x1922 <pwm0+0x4c>
		{
			count=0;     
    1916:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <count.2170+0x1>
    191a:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <count.2170>
			return PULSE_ON;   //when pulse_width==period
    191e:	80 e0       	ldi	r24, 0x00	; 0
    1920:	08 95       	ret
		}
		else
		{
			count=0;     
    1922:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <count.2170+0x1>
    1926:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <count.2170>
			return PULSE_OFF;   //when pulse_width<period
    192a:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
}
    192c:	08 95       	ret

0000192e <config_timer0>:
#include<header.h>

void config_timer0(void)
{
	TCCR0 |= (0<<CS02) | (1<<CS01) | (1<<CS00); // prescaler 64 -> fclk=16MHz->  f=16MHz/64 -> f=250kHz-> t=1/f -> t=1/250k -> t=4us
    192e:	83 b7       	in	r24, 0x33	; 51
    1930:	83 60       	ori	r24, 0x03	; 3
    1932:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<OCIE0);                        //set interrupt compare
    1934:	89 b7       	in	r24, 0x39	; 57
    1936:	82 60       	ori	r24, 0x02	; 2
    1938:	89 bf       	out	0x39, r24	; 57
	OCR0=249;                                   //t=4us   t*x=tTimer = 4us*x=1ms -> x 1ms/4us = 250
    193a:	89 ef       	ldi	r24, 0xF9	; 249
    193c:	8c bf       	out	0x3c, r24	; 60
	TCCR0 |= 1<<WGM01;                          //CTC
    193e:	83 b7       	in	r24, 0x33	; 51
    1940:	88 60       	ori	r24, 0x08	; 8
    1942:	83 bf       	out	0x33, r24	; 51
	sei();                                      // enable all interrupts
    1944:	78 94       	sei
    1946:	08 95       	ret

00001948 <__vector_10>:
}
ISR(TIMER0_COMP_vect)
{
    1948:	1f 92       	push	r1
    194a:	0f 92       	push	r0
    194c:	0f b6       	in	r0, 0x3f	; 63
    194e:	0f 92       	push	r0
    1950:	11 24       	eor	r1, r1
    1952:	8f 93       	push	r24
	var_1ms = 1;
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <var_1ms>
}
    195a:	8f 91       	pop	r24
    195c:	0f 90       	pop	r0
    195e:	0f be       	out	0x3f, r0	; 63
    1960:	0f 90       	pop	r0
    1962:	1f 90       	pop	r1
    1964:	18 95       	reti

00001966 <config_timer1>:

void config_timer1(void)
{
	TCCR1B|=(0<<CS12)|(1<<CS11)|(1<<CS10); // prescaler 64 -> fclk=16MHz->  f=16MHz/64 -> f=250kHz-> t=1/f -> t=1/250k -> t=4us
    1966:	8e b5       	in	r24, 0x2e	; 46
    1968:	83 60       	ori	r24, 0x03	; 3
    196a:	8e bd       	out	0x2e, r24	; 46
	TIMSK|=(1<<OCIE1A);                    //set interrupt compare
    196c:	89 b7       	in	r24, 0x39	; 57
    196e:	80 61       	ori	r24, 0x10	; 16
    1970:	89 bf       	out	0x39, r24	; 57
	OCR1A=5;                               //t=4us   t*x=tTimer = 4us*x=24us -> x 8us/4us = 6
    1972:	85 e0       	ldi	r24, 0x05	; 5
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	9b bd       	out	0x2b, r25	; 43
    1978:	8a bd       	out	0x2a, r24	; 42
	TCCR1B|=1<<WGM12;                      //CTC
    197a:	8e b5       	in	r24, 0x2e	; 46
    197c:	88 60       	ori	r24, 0x08	; 8
    197e:	8e bd       	out	0x2e, r24	; 46
	sei();                                 // enable all interrupts
    1980:	78 94       	sei
    1982:	08 95       	ret

00001984 <__vector_7>:
}
ISR(TIMER1_COMPA_vect)
{
    1984:	1f 92       	push	r1
    1986:	0f 92       	push	r0
    1988:	0f b6       	in	r0, 0x3f	; 63
    198a:	0f 92       	push	r0
    198c:	11 24       	eor	r1, r1
    198e:	8f 93       	push	r24
	var_24us=1;
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <var_24us>
    1996:	8f 91       	pop	r24
    1998:	0f 90       	pop	r0
    199a:	0f be       	out	0x3f, r0	; 63
    199c:	0f 90       	pop	r0
    199e:	1f 90       	pop	r1
    19a0:	18 95       	reti

000019a2 <usart_init>:
#define USART_BAUDRATE 9600                                     //Define frequency transfer
#define BAUD_PRESCALE (((F_CPU / (USART_BAUDRATE * 16UL))) - 1)  //10ms for 1 character

void usart_init(void)
{
	UCSRB |= (1<<RXCIE) | (1 << RXEN) | (1<<TXCIE) | (1 << TXEN);   // Turn on the transmission reception...circuitry and receiver interrupt
    19a2:	8a b1       	in	r24, 0x0a	; 10
    19a4:	88 6d       	ori	r24, 0xD8	; 216
    19a6:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1 << URSEL) | (1 << UCSZ1)| (1 << UCSZ0);             // Use 8-bit character sizes
    19a8:	80 b5       	in	r24, 0x20	; 32
    19aa:	86 68       	ori	r24, 0x86	; 134
    19ac:	80 bd       	out	0x20, r24	; 32
	UBRRL = BAUD_PRESCALE;             // Load lower 8-bits of the baud rate value...into the low byte of the UBRR register
    19ae:	87 e6       	ldi	r24, 0x67	; 103
    19b0:	89 b9       	out	0x09, r24	; 9
	UBRRH = (BAUD_PRESCALE >> 8);      // Load upper 8-bits of the baud rate value...into the high byte of the UBRR register
    19b2:	10 bc       	out	0x20, r1	; 32
    19b4:	08 95       	ret

000019b6 <__vector_15>:
}

ISR (USART_TXC_vect)
{
    19b6:	1f 92       	push	r1
    19b8:	0f 92       	push	r0
    19ba:	0f b6       	in	r0, 0x3f	; 63
    19bc:	0f 92       	push	r0
    19be:	11 24       	eor	r1, r1
    19c0:	8f 93       	push	r24
    19c2:	ef 93       	push	r30
    19c4:	ff 93       	push	r31
	if(temp[index_vect]!='\0')          //send elements until string end '\0'
    19c6:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <index_vect>
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	ea 5a       	subi	r30, 0xAA	; 170
    19ce:	fe 4f       	sbci	r31, 0xFE	; 254
    19d0:	80 81       	ld	r24, Z
    19d2:	88 23       	and	r24, r24
    19d4:	39 f0       	breq	.+14     	; 0x19e4 <__vector_15+0x2e>
	{
		UDR=temp[index_vect];           //write UDR
    19d6:	8c b9       	out	0x0c, r24	; 12
		index_vect++;                   //next element for transmission
    19d8:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <index_vect>
    19dc:	8f 5f       	subi	r24, 0xFF	; 255
    19de:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <index_vect>
    19e2:	0c c0       	rjmp	.+24     	; 0x19fc <__vector_15+0x46>
	} 
	else
	{
		if(command_transmited==0)
    19e4:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <command_transmited>
    19e8:	81 11       	cpse	r24, r1
    19ea:	06 c0       	rjmp	.+12     	; 0x19f8 <__vector_15+0x42>
		{
			UDR=0x0D;               //send '/n' in order to insert new line in serial communication receive output 
    19ec:	8d e0       	ldi	r24, 0x0D	; 13
    19ee:	8c b9       	out	0x0c, r24	; 12
			command_transmited=1;   //just once
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <command_transmited>
    19f6:	02 c0       	rjmp	.+4      	; 0x19fc <__vector_15+0x46>
		}
		else
		{
			index_vect=0;     //end transmission->reset index for future reception interrupt
    19f8:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <index_vect>
		}
	}
}
    19fc:	ff 91       	pop	r31
    19fe:	ef 91       	pop	r30
    1a00:	8f 91       	pop	r24
    1a02:	0f 90       	pop	r0
    1a04:	0f be       	out	0x3f, r0	; 63
    1a06:	0f 90       	pop	r0
    1a08:	1f 90       	pop	r1
    1a0a:	18 95       	reti

00001a0c <__vector_13>:

ISR (USART_RXC_vect)
{
    1a0c:	1f 92       	push	r1
    1a0e:	0f 92       	push	r0
    1a10:	0f b6       	in	r0, 0x3f	; 63
    1a12:	0f 92       	push	r0
    1a14:	11 24       	eor	r1, r1
    1a16:	8f 93       	push	r24
    1a18:	9f 93       	push	r25
    1a1a:	ef 93       	push	r30
    1a1c:	ff 93       	push	r31
	unsigned char value;
	value=UDR;                       //read UDR
    1a1e:	9c b1       	in	r25, 0x0c	; 12
	if(value!=0x0D)                  //if character != CR who's send as last character from serial
    1a20:	9d 30       	cpi	r25, 0x0D	; 13
    1a22:	59 f0       	breq	.+22     	; 0x1a3a <__vector_13+0x2e>
	{
		temp[index_vect] = value;         //fetch the received character into vector
    1a24:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <index_vect>
    1a28:	e8 2f       	mov	r30, r24
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	ea 5a       	subi	r30, 0xAA	; 170
    1a2e:	fe 4f       	sbci	r31, 0xFE	; 254
    1a30:	90 83       	st	Z, r25
		index_vect++;                     //next element
    1a32:	8f 5f       	subi	r24, 0xFF	; 255
    1a34:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <index_vect>
    1a38:	15 c0       	rjmp	.+42     	; 0x1a64 <__vector_13+0x58>
	}
	else                             //when value is equal to CR => the receive is done
	{
		command_transmited=0;        //reset command_transmited
    1a3a:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <command_transmited>
		temp[index_vect]='\0';            //insert end string '/0' in vector
    1a3e:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <index_vect>
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	ea 5a       	subi	r30, 0xAA	; 170
    1a46:	fe 4f       	sbci	r31, 0xFE	; 254
    1a48:	10 82       	st	Z, r1
		command_received=1;          //set variable for function execution in while(1)
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <command_received>
		index_vect=0;					 //reset index vector
    1a50:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <index_vect>
		UDR=temp[index_vect];             //send first element in order to start transmission chain
    1a54:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <temp>
    1a58:	8c b9       	out	0x0c, r24	; 12
		index_vect++;                     //next index for transmission chain
    1a5a:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <index_vect>
    1a5e:	8f 5f       	subi	r24, 0xFF	; 255
    1a60:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <index_vect>
	}
}
    1a64:	ff 91       	pop	r31
    1a66:	ef 91       	pop	r30
    1a68:	9f 91       	pop	r25
    1a6a:	8f 91       	pop	r24
    1a6c:	0f 90       	pop	r0
    1a6e:	0f be       	out	0x3f, r0	; 63
    1a70:	0f 90       	pop	r0
    1a72:	1f 90       	pop	r1
    1a74:	18 95       	reti

00001a76 <commandReceived>:
void commandReceived(void)
{
	if(command_received==1)
    1a76:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <command_received>
    1a7a:	81 30       	cpi	r24, 0x01	; 1
    1a7c:	09 f0       	breq	.+2      	; 0x1a80 <commandReceived+0xa>
    1a7e:	57 c0       	rjmp	.+174    	; 0x1b2e <commandReceived+0xb8>
	{
		if((temp[0]=='o')&&(temp[1]=='n'))    //"on" ->enable pwm
    1a80:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <temp>
    1a84:	8f 36       	cpi	r24, 0x6F	; 111
    1a86:	89 f4       	brne	.+34     	; 0x1aaa <commandReceived+0x34>
    1a88:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <temp+0x1>
    1a8c:	8e 36       	cpi	r24, 0x6E	; 110
    1a8e:	09 f0       	breq	.+2      	; 0x1a92 <commandReceived+0x1c>
    1a90:	4b c0       	rjmp	.+150    	; 0x1b28 <commandReceived+0xb2>
		{
			enable_pwm=TRUE;
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <enable_pwm>
    1a98:	44 c0       	rjmp	.+136    	; 0x1b22 <commandReceived+0xac>
		}
		if((temp[0]=='o')&&(temp[1]=='f')&&(temp[2]=='f'))     //"off" ->disable pwm
    1a9a:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <temp+0x2>
    1a9e:	86 36       	cpi	r24, 0x66	; 102
    1aa0:	09 f0       	breq	.+2      	; 0x1aa4 <commandReceived+0x2e>
    1aa2:	3f c0       	rjmp	.+126    	; 0x1b22 <commandReceived+0xac>
		{
			enable_pwm=FALSE;
    1aa4:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <enable_pwm>
    1aa8:	3c c0       	rjmp	.+120    	; 0x1b22 <commandReceived+0xac>
		}
		if(temp[0]=='T')                //"T_ _" ->change T  (ex: T70, T90)
    1aaa:	84 35       	cpi	r24, 0x54	; 84
    1aac:	d9 f4       	brne	.+54     	; 0x1ae4 <commandReceived+0x6e>
		{
			period=atoi(&temp[1]);
    1aae:	87 e5       	ldi	r24, 0x57	; 87
    1ab0:	91 e0       	ldi	r25, 0x01	; 1
    1ab2:	79 d0       	rcall	.+242    	; 0x1ba6 <atoi>
    1ab4:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <period+0x1>
    1ab8:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <period>
			if(period<MIN_T)              //period<10ms => period=10ms
    1abc:	8a 30       	cpi	r24, 0x0A	; 10
    1abe:	91 05       	cpc	r25, r1
    1ac0:	3c f4       	brge	.+14     	; 0x1ad0 <commandReceived+0x5a>
			{
				period=MIN_T;
    1ac2:	8a e0       	ldi	r24, 0x0A	; 10
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <period+0x1>
    1aca:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <period>
    1ace:	29 c0       	rjmp	.+82     	; 0x1b22 <commandReceived+0xac>
			}
			if(period>MAX_T)
    1ad0:	89 38       	cpi	r24, 0x89	; 137
    1ad2:	93 41       	sbci	r25, 0x13	; 19
    1ad4:	34 f1       	brlt	.+76     	; 0x1b22 <commandReceived+0xac>
			{
				period=MAX_T;           //period>5s => period=5s
    1ad6:	88 e8       	ldi	r24, 0x88	; 136
    1ad8:	93 e1       	ldi	r25, 0x13	; 19
    1ada:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <period+0x1>
    1ade:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <period>
    1ae2:	1f c0       	rjmp	.+62     	; 0x1b22 <commandReceived+0xac>
			}
		}
		if(temp[0]=='F')                //"F_ _" ->change FU  (ex: F20, F50)
    1ae4:	86 34       	cpi	r24, 0x46	; 70
    1ae6:	e9 f4       	brne	.+58     	; 0x1b22 <commandReceived+0xac>
		{
			up_pulses=atoi(&temp[1]);
    1ae8:	87 e5       	ldi	r24, 0x57	; 87
    1aea:	91 e0       	ldi	r25, 0x01	; 1
    1aec:	5c d0       	rcall	.+184    	; 0x1ba6 <atoi>
			if(up_pulses<MIN_UP_PULSES)                //pulse<0ms => pulse=0ms
    1aee:	99 23       	and	r25, r25
    1af0:	2c f0       	brlt	.+10     	; 0x1afc <commandReceived+0x86>
				period=MAX_T;           //period>5s => period=5s
			}
		}
		if(temp[0]=='F')                //"F_ _" ->change FU  (ex: F20, F50)
		{
			up_pulses=atoi(&temp[1]);
    1af2:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <up_pulses+0x1>
    1af6:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <up_pulses>
    1afa:	04 c0       	rjmp	.+8      	; 0x1b04 <commandReceived+0x8e>
			if(up_pulses<MIN_UP_PULSES)                //pulse<0ms => pulse=0ms
			{
				up_pulses=0;
    1afc:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <up_pulses+0x1>
    1b00:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <up_pulses>
			}
			if(up_pulses>period)           //pulse>period => pulse=period
    1b04:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <period>
    1b08:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <period+0x1>
    1b0c:	20 91 43 01 	lds	r18, 0x0143	; 0x800143 <up_pulses>
    1b10:	30 91 44 01 	lds	r19, 0x0144	; 0x800144 <up_pulses+0x1>
    1b14:	82 17       	cp	r24, r18
    1b16:	93 07       	cpc	r25, r19
    1b18:	24 f4       	brge	.+8      	; 0x1b22 <commandReceived+0xac>
			{
				up_pulses=period;
    1b1a:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <up_pulses+0x1>
    1b1e:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <up_pulses>
			}
		}
		command_received=0;
    1b22:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <command_received>
	}
    1b26:	08 95       	ret
	{
		if((temp[0]=='o')&&(temp[1]=='n'))    //"on" ->enable pwm
		{
			enable_pwm=TRUE;
		}
		if((temp[0]=='o')&&(temp[1]=='f')&&(temp[2]=='f'))     //"off" ->disable pwm
    1b28:	86 36       	cpi	r24, 0x66	; 102
    1b2a:	d9 f7       	brne	.-10     	; 0x1b22 <commandReceived+0xac>
    1b2c:	b6 cf       	rjmp	.-148    	; 0x1a9a <commandReceived+0x24>
    1b2e:	08 95       	ret

00001b30 <main>:
#include<header.h>

int main(void)
{ 
	initialization(); 
    1b30:	0e 94 3d 00 	call	0x7a	; 0x7a <initialization>
	
	while(1)
	{		
		//--buttons--
		state_machine();
    1b34:	80 de       	rcall	.-768    	; 0x1836 <state_machine>
		switch_T_FU();
    1b36:	af de       	rcall	.-674    	; 0x1896 <switch_T_FU>
		
		//--USART--
		commandReceived();
    1b38:	9e df       	rcall	.-196    	; 0x1a76 <commandReceived>
    1b3a:	0e 94 6d 03 	call	0x6da	; 0x6da <LCD_String_start>
		
		//--Display-- 
		LCD_String_start();    //update display every ~8ms       
    1b3e:	0e 94 63 00 	call	0xc6	; 0xc6 <call_1ms>
		
		//--PWM-- 
		call_1ms();      //transmission/reception every 1ms     
    1b42:	f8 cf       	rjmp	.-16     	; 0x1b34 <main+0x4>

00001b44 <__udivmodsi4>:
    1b44:	a1 e2       	ldi	r26, 0x21	; 33
    1b46:	1a 2e       	mov	r1, r26
    1b48:	aa 1b       	sub	r26, r26
    1b4a:	bb 1b       	sub	r27, r27
    1b4c:	fd 01       	movw	r30, r26
    1b4e:	0d c0       	rjmp	.+26     	; 0x1b6a <__udivmodsi4_ep>

00001b50 <__udivmodsi4_loop>:
    1b50:	aa 1f       	adc	r26, r26
    1b52:	bb 1f       	adc	r27, r27
    1b54:	ee 1f       	adc	r30, r30
    1b56:	ff 1f       	adc	r31, r31
    1b58:	a2 17       	cp	r26, r18
    1b5a:	b3 07       	cpc	r27, r19
    1b5c:	e4 07       	cpc	r30, r20
    1b5e:	f5 07       	cpc	r31, r21
    1b60:	20 f0       	brcs	.+8      	; 0x1b6a <__udivmodsi4_ep>
    1b62:	a2 1b       	sub	r26, r18
    1b64:	b3 0b       	sbc	r27, r19
    1b66:	e4 0b       	sbc	r30, r20
    1b68:	f5 0b       	sbc	r31, r21

00001b6a <__udivmodsi4_ep>:
    1b6a:	66 1f       	adc	r22, r22
    1b6c:	77 1f       	adc	r23, r23
    1b6e:	88 1f       	adc	r24, r24
    1b70:	99 1f       	adc	r25, r25
    1b72:	1a 94       	dec	r1
    1b74:	69 f7       	brne	.-38     	; 0x1b50 <__udivmodsi4_loop>
    1b76:	60 95       	com	r22
    1b78:	70 95       	com	r23
    1b7a:	80 95       	com	r24
    1b7c:	90 95       	com	r25
    1b7e:	9b 01       	movw	r18, r22
    1b80:	ac 01       	movw	r20, r24
    1b82:	bd 01       	movw	r22, r26
    1b84:	cf 01       	movw	r24, r30
    1b86:	08 95       	ret

00001b88 <__umulhisi3>:
    1b88:	a2 9f       	mul	r26, r18
    1b8a:	b0 01       	movw	r22, r0
    1b8c:	b3 9f       	mul	r27, r19
    1b8e:	c0 01       	movw	r24, r0
    1b90:	a3 9f       	mul	r26, r19
    1b92:	70 0d       	add	r23, r0
    1b94:	81 1d       	adc	r24, r1
    1b96:	11 24       	eor	r1, r1
    1b98:	91 1d       	adc	r25, r1
    1b9a:	b2 9f       	mul	r27, r18
    1b9c:	70 0d       	add	r23, r0
    1b9e:	81 1d       	adc	r24, r1
    1ba0:	11 24       	eor	r1, r1
    1ba2:	91 1d       	adc	r25, r1
    1ba4:	08 95       	ret

00001ba6 <atoi>:
    1ba6:	fc 01       	movw	r30, r24
    1ba8:	88 27       	eor	r24, r24
    1baa:	99 27       	eor	r25, r25
    1bac:	e8 94       	clt
    1bae:	21 91       	ld	r18, Z+
    1bb0:	20 32       	cpi	r18, 0x20	; 32
    1bb2:	e9 f3       	breq	.-6      	; 0x1bae <atoi+0x8>
    1bb4:	29 30       	cpi	r18, 0x09	; 9
    1bb6:	10 f0       	brcs	.+4      	; 0x1bbc <atoi+0x16>
    1bb8:	2e 30       	cpi	r18, 0x0E	; 14
    1bba:	c8 f3       	brcs	.-14     	; 0x1bae <atoi+0x8>
    1bbc:	2b 32       	cpi	r18, 0x2B	; 43
    1bbe:	39 f0       	breq	.+14     	; 0x1bce <atoi+0x28>
    1bc0:	2d 32       	cpi	r18, 0x2D	; 45
    1bc2:	31 f4       	brne	.+12     	; 0x1bd0 <atoi+0x2a>
    1bc4:	68 94       	set
    1bc6:	03 c0       	rjmp	.+6      	; 0x1bce <atoi+0x28>
    1bc8:	15 d0       	rcall	.+42     	; 0x1bf4 <__mulhi_const_10>
    1bca:	82 0f       	add	r24, r18
    1bcc:	91 1d       	adc	r25, r1
    1bce:	21 91       	ld	r18, Z+
    1bd0:	20 53       	subi	r18, 0x30	; 48
    1bd2:	2a 30       	cpi	r18, 0x0A	; 10
    1bd4:	c8 f3       	brcs	.-14     	; 0x1bc8 <atoi+0x22>
    1bd6:	1e f4       	brtc	.+6      	; 0x1bde <atoi+0x38>
    1bd8:	90 95       	com	r25
    1bda:	81 95       	neg	r24
    1bdc:	9f 4f       	sbci	r25, 0xFF	; 255
    1bde:	08 95       	ret

00001be0 <__itoa_ncheck>:
    1be0:	bb 27       	eor	r27, r27
    1be2:	4a 30       	cpi	r20, 0x0A	; 10
    1be4:	31 f4       	brne	.+12     	; 0x1bf2 <__itoa_ncheck+0x12>
    1be6:	99 23       	and	r25, r25
    1be8:	22 f4       	brpl	.+8      	; 0x1bf2 <__itoa_ncheck+0x12>
    1bea:	bd e2       	ldi	r27, 0x2D	; 45
    1bec:	90 95       	com	r25
    1bee:	81 95       	neg	r24
    1bf0:	9f 4f       	sbci	r25, 0xFF	; 255
    1bf2:	09 c0       	rjmp	.+18     	; 0x1c06 <__utoa_common>

00001bf4 <__mulhi_const_10>:
    1bf4:	7a e0       	ldi	r23, 0x0A	; 10
    1bf6:	97 9f       	mul	r25, r23
    1bf8:	90 2d       	mov	r25, r0
    1bfa:	87 9f       	mul	r24, r23
    1bfc:	80 2d       	mov	r24, r0
    1bfe:	91 0d       	add	r25, r1
    1c00:	11 24       	eor	r1, r1
    1c02:	08 95       	ret

00001c04 <__utoa_ncheck>:
    1c04:	bb 27       	eor	r27, r27

00001c06 <__utoa_common>:
    1c06:	fb 01       	movw	r30, r22
    1c08:	55 27       	eor	r21, r21
    1c0a:	aa 27       	eor	r26, r26
    1c0c:	88 0f       	add	r24, r24
    1c0e:	99 1f       	adc	r25, r25
    1c10:	aa 1f       	adc	r26, r26
    1c12:	a4 17       	cp	r26, r20
    1c14:	10 f0       	brcs	.+4      	; 0x1c1a <__utoa_common+0x14>
    1c16:	a4 1b       	sub	r26, r20
    1c18:	83 95       	inc	r24
    1c1a:	50 51       	subi	r21, 0x10	; 16
    1c1c:	b9 f7       	brne	.-18     	; 0x1c0c <__utoa_common+0x6>
    1c1e:	a0 5d       	subi	r26, 0xD0	; 208
    1c20:	aa 33       	cpi	r26, 0x3A	; 58
    1c22:	08 f0       	brcs	.+2      	; 0x1c26 <__utoa_common+0x20>
    1c24:	a9 5d       	subi	r26, 0xD9	; 217
    1c26:	a1 93       	st	Z+, r26
    1c28:	00 97       	sbiw	r24, 0x00	; 0
    1c2a:	79 f7       	brne	.-34     	; 0x1c0a <__utoa_common+0x4>
    1c2c:	b1 11       	cpse	r27, r1
    1c2e:	b1 93       	st	Z+, r27
    1c30:	11 92       	st	Z+, r1
    1c32:	cb 01       	movw	r24, r22
    1c34:	00 c0       	rjmp	.+0      	; 0x1c36 <strrev>

00001c36 <strrev>:
    1c36:	dc 01       	movw	r26, r24
    1c38:	fc 01       	movw	r30, r24
    1c3a:	67 2f       	mov	r22, r23
    1c3c:	71 91       	ld	r23, Z+
    1c3e:	77 23       	and	r23, r23
    1c40:	e1 f7       	brne	.-8      	; 0x1c3a <strrev+0x4>
    1c42:	32 97       	sbiw	r30, 0x02	; 2
    1c44:	04 c0       	rjmp	.+8      	; 0x1c4e <strrev+0x18>
    1c46:	7c 91       	ld	r23, X
    1c48:	6d 93       	st	X+, r22
    1c4a:	70 83       	st	Z, r23
    1c4c:	62 91       	ld	r22, -Z
    1c4e:	ae 17       	cp	r26, r30
    1c50:	bf 07       	cpc	r27, r31
    1c52:	c8 f3       	brcs	.-14     	; 0x1c46 <strrev+0x10>
    1c54:	08 95       	ret

00001c56 <_exit>:
    1c56:	f8 94       	cli

00001c58 <__stop_program>:
    1c58:	ff cf       	rjmp	.-2      	; 0x1c58 <__stop_program>
